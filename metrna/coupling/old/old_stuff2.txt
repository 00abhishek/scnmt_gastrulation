
<!-- Filter promoters with presence of histone marks -->
```{r}
histone_marks <- list()
```

H3K27ac
```{r}
# H3K27ac <- fread("/Users/ricard/data/gastrulation/features/filt/Wei_K27ac.bed")[,c(1,2,3,4,5)] %>%
H3K27ac <- fread("/Users/ricard/data/gastrulation/features/filt/E6.5_H3K27ac.bed")[,c(1,2,3,4,5)] %>%
  setnames(c("chr","start","end","strand","id")) %>% setkey(chr,start,end)

# histone_marks[["H3K27ac"]] <- foverlaps(x = tss, y = H3K27ac, type="any", nomatch=0, mult="first") %>% 
#   .[,c("start","end","strand","id"):=NULL] %>%
#   .[,histone:="H3K27ac"] %>%
#   setnames(c("i.start","i.end","i.strand"),c("start","end","strand"))
```

H3K4me3
```{r}
# H3K4me3 <- fread("/Users/ricard/data/gastrulation/features/filt/Wei_K4me3.bed")[,c(1,2,3,4,5)] %>%
H3K4me3 <- fread("/Users/ricard/data/gastrulation/features/filt/E6.5_H3K4me3.bed")[,c(1,2,3,4,5)] %>%
  setnames(c("chr","start","end","strand","id")) %>% setkey(chr,start,end)

# histone_marks[["H3K4me3"]] <- foverlaps(x = tss, y = H3K4me3, type="any", nomatch=0, mult="first") %>% 
#   .[,c("start","end","strand","id"):=NULL] %>%
#   .[,histone:="H3K4me3"] %>%
#   setnames(c("i.start","i.end","i.strand"),c("start","end","strand"))
```

H3K27me3
```{r}
# H3K27me3 <- fread("/Users/ricard/data/gastrulation/features/filt/Wei_K27me3.bed")[,c(1,2,3,4,5)] %>%
#   setnames(c("chr","start","end","strand","id")) %>% setkey(chr,start,end)
# 
# histone_marks[["H3K27me3"]] <- foverlaps(x = tss, y = H3K27me3, type="any", nomatch=0, mult="first") %>% 
#   .[,c("i.start","i.end","i.strand","id"):=NULL] %>%
#   .[,histone:="H3K27me3"]
```

```{r}
# histone_tss <- rbindlist(histone_marks)

# tss <- rbind(
#   tss[!ens_id%in%histone_tss$ens_id] %>% .[,histone:="None"],
#   rbindlist(histone_marks)
# ) %>% setkey(chr,start,end)
```

```{r}
# tss[,.N,by=c("histone","type")]
# tss[,.N,by=c("ens_id")] %>% .$N %>% table()
```





STOP HERE









<!-- Split genes into informative groups -->
```{r}
genes <- unique(bar_pseudobulk$ens_id) %>% as.character
sce_filt <- sce[genes,]
```

Mean expression
```{r}

```


Highly variable genes 
```{r}
library(scran)

# Temporarily remove the lowly expressed genes
sce_filt <- sce_filt[!(rowMeans(counts(sce_filt)) <= 1 | rowData(sce_filt)$pct_dropout_counts > 90),]

# Re-calculate size factors without the lowly expressed genes and normalize
sf = computeSumFactors(counts(sce_filt), sizes=c(10,20,30,40), positive=TRUE)
sizeFactors(sce_filt) <- sf; sce_filt$sizeFactor <- sf
sce_filt <- normalize(sce_filt, exprs_values="counts")

# Update quality metrics
sce_filt = calculateQCMetrics(sce_filt)

# Fit a mean-dependent trend to the gene-specific variances
var.fit <- trendVar(sce_filt, method="loess", use.spikes=FALSE)

# Decompose the gene-specific variance into biological and technical components
# The technical component of the variance for each gene is determined by interpolating the fitted trend in fit at the mean log-CPM for that gene, which represents variance due to sequencing noise, variability in capture efficiency, etc. 
# The biological component is determined by subtracting the technical component from the total variance.
var.out <- decomposeVar(sce_filt, var.fit)
var.out[is.nan(var.out$p.value),] <- NA
# rowData(sce_filt)$techVar <- var.out$tech
# rowData(sce_filt)$bioVar <- var.out$bio
# rowData(sce_filt)$totalVar <- var.out$total

# Detect highly variable genes
# hvg.out <- var.out[which(var.out$bio >= 2.5),]
# hvg.out <- var.out[which(var.out$FDR <= 0.01),]
hvg.out <- var.out[which(var.out$FDR <= 0.05 & var.out$bio >= 1.0),]
hvg.out <- hvg.out[order(hvg.out$bio, decreasing=TRUE),]
# rowData(sce_filt)$HVG <- rownames(sce_filt) %in% rownames(hvg.out)
# rowData(sce_filt)$HVG_high <- rownames(sce_filt) %in% rownames(hvg.out) & rowData(sce_filt)$mean_exprs>5
# rowData(sce_filt)$HVG_low <- rownames(sce_filt) %in% rownames(hvg.out) & rowData(sce_filt)$mean_exprs<5

# Plot highly variable genes
plot(var.out$mean, var.out$total, pch=16, cex=0.6, xlab="Mean log-expression", ylab="Variance of log-expression")
o <- order(var.out$mean)
lines(var.out$mean[o], var.out$tech[o], col="dodgerblue", lwd=2)
# points(var.out$mean[isSpike(sce_filt_filt)], var.out$total[isSpike(sce_filt_filt)], col="red", pch=16)
points(hvg.out$mean, hvg.out$total, col="green", pch=16)

# Detect lowly variable genes
# lvg.out <- var.out[which(var.out$bio >= -0.5 & var.out$bio <= 0.5),]
# lvg.out <- lvg.out[order(lvg.out$bio, decreasing=TRUE),]
# rowData(sce_filt)$LVG <- rownames(sce_filt) %in% rownames(lvg.out)
# rowData(sce_filt)$LVG_high <- rownames(sce_filt) %in% rownames(lvg.out) & rowData(sce_filt)$mean_exprs>5
# rowData(sce_filt)$LVG_low <- rownames(sce_filt) %in% rownames(lvg.out) & rowData(sce_filt)$mean_exprs<5

# Plot lowly variable genes
# plot(var.out$mean, var.out$total, pch=16, cex=0.6, xlab="Mean log-expression", ylab="Variance of log-expression")
# o <- order(var.out$mean)
# lines(var.out$mean[o], var.out$tech[o], col="dodgerblue", lwd=2)
# # points(var.out$mean[isSpike(sce_filt)], var.out$total[isSpike(sce_filt)], col="red", pch=16)
# points(lvg.out$mean, lvg.out$total, col="green", pch=16)

# print(sum(rowData(sce)$HVG_low))
# print(sum(rowData(sce)$HVG_high))
# print(sum(rowData(sce)$LVG_low))
# print(sum(rowData(sce)$LVG_high))
```

```{r}
hvg <- rownames(hvg.out)
non.hvg <- rownames(var.out)[!rownames(var.out) %in% rownames(hvg.out)]
```

```{r}
bar_filt <- copy(bar_pseudobulk)
bar_filt[ens_id%in%hvg,type:="HVG"]
bar_filt[ens_id%in%non.hvg,type:="non-HVG"]
bar_filt <- bar_filt[is.na(type),type:="filtered_out"]

# foo <- bar_filt %>% .[,.N, by=c("window_center","sample","stage","stage_lineage","type")]
cor <- bar_filt %>% .[,.(r=cor(x=rate, y=expr, method="pearson")), by=c("window_center","stage","stage_lineage","type")]

p <- ggplot(cor,aes(x=window_center, y=r)) +
  # stat_summary(aes(group=interaction(stage,type), color=interaction(stage,type)), fun.data=mean_sd, geom="smooth", alpha=0.2, size=1.0) +
  geom_line(aes(group=interaction(stage,type), color=interaction(stage,type)), alpha=0.5, size=1.0) +
  # stat_smooth(aes(group=interaction(stage,type), fill=interaction(stage,type), color=interaction(stage,type)), method="loess") +
  geom_hline(yintercept=0, linetype="dashed", color="black", size=0.5) +
  geom_vline(xintercept=0, linetype="dashed", color="black", size=0.5) +
  # geom_segment(x=-opts$up, xend=opts$down, y=0, yend=0, color="black", size=0.5,  linetype="dashed") +
  ylab("Correlation") + xlab("Genomic distance from TSS (bp)") +
  scale_x_continuous(limits=c(-opts$up,opts$down)) +
  # scale_y_continuous(limits=c(-0.35,0.35), breaks=c(-0.3,0,0.3), expand=c(0,0)) +
  # scale_colour_discrete(labels=c("CG methylation", "GC accessibility")) +
  scale_fill_discrete(guide=FALSE) +
  theme_pub()
p

# pdf(file="out/local_cor.pdf")
# print(p)
# dev.off()
```

