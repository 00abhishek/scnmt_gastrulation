.[pass_metQC==T & pass_rnaQC==T & outlier==F & stage_lineage%in%opts$stage_lineage,sample]
# Load sample metadata
sample_metadata <- fread(io$sample_metadata)[,c("sample","id_met","stage","lineage")] %>% .[sample%in%opts$cells] %>%
.[,stage_lineage:=paste(stage,lineage,sep="_")]
# Load RNA data
sceset <- readRDS(file=io$rna)
sceset_filt <- sceset[,colnames(sceset) %in% sample_metadata$sample]
rna <- exprs(sceset_filt) %>% t %>% as.data.table %>% .[,sample:=colnames(sceset_filt)] %>%
melt(id.vars = "sample", value.name = "expr", variable.name = "gene") %>%
merge(fData(sceset) %>% tibble::rownames_to_column("gene") %>% .[,c("gene","ens_id")] %>% setnames("ens_id","id"))
sample_stats <- fread(file=io$sample_stats, header=T, sep="\t", stringsAsFactors=F) %>% .[context=="CG"] %>%
setnames("id","id_met")
sample_metadata <- merge(sample_metadata, sample_stats , by="id_met")
metrna <- merge(sample_metadata, rna, by="sample")
# Remove genes that are not expressed
keep_genes <- metrna[,.(cdr=sum(expr>0)/.N), by="gene"] %>% .[cdr >= opts$min.cdr, gene]
metrna_filt <- metrna[gene %in% keep_genes]
# Remove lowly variable genes
keep_hv_sites <- metrna_filt[,.(var=var(expr)), by="gene"] %>% setorder(-var) %>% head(n = nrow(.) * opts$f.var) %>% .$gene
metrna_filt <- metrna_filt[gene %in% keep_hv_sites]
cor <- metrna_filt[, .(V1=unlist(cor.test(expr, mean, alternative="two.sided", method="pearson")[c("estimate","statistic","p.value")])), by=c("gene")] %>%
.[,para := c("r", "t", "p")] %>% dcast(gene~para,value.var="V1") %>%
.[, c("padj_fdr") := list(p.adjust(p, method="fdr"))] %>%
.[, c("log_padj_fdr") := list(-log10(padj_fdr))] %>%
.[,sig:=padj_fdr<=opts$threshold_fdr] %>% setorder(padj_fdr)
# print(cor[sig==TRUE])
View(cor)
genes <- c("Tet1","Tet2","Tet3")
tmp <- metrna_filt[gene %in% genes]
p <- ggplot(tmp, aes(x=mean, y=expr)) +
labs(title="", x="Cellular mean methylation rate", y="Expression") +
geom_point(aes(color=stage_lineage)) +
stat_smooth(method="lm", se=F, color="black", alpha=.25, linetype="dashed", size=1) +
scale_y_continuous(limits = c(min(tmp$expr),max(tmp$expr))) +
facet_wrap(~gene) +
scatter_theme()
print(p)
View(cor)
genes <- c("Otx2")
tmp <- metrna_filt[gene %in% genes]
p <- ggplot(tmp, aes(x=mean, y=expr)) +
labs(title="", x="Cellular mean methylation rate", y="Expression") +
geom_point(aes(color=stage_lineage)) +
stat_smooth(method="lm", se=F, color="black", alpha=.25, linetype="dashed", size=1) +
scale_y_continuous(limits = c(min(tmp$expr),max(tmp$expr))) +
facet_wrap(~gene) +
scatter_theme()
print(p)
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(ggplot2))
scatter_theme <- function() {
p <- theme(
plot.title = element_text(size=20, hjust=0.5),
axis.title.y = element_text(colour="black", size=20, margin=margin(0,15,0,0)),
axis.title.x = element_text(colour="black", size=20, margin=margin(15,0,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.6)),
axis.text.y = element_text(colour="black",size=rel(1.6)),
axis.line = element_line(colour="black", size=rel(0.9)),
axis.ticks = element_line(colour="black", size=rel(1.0)),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.position="right",
legend.text=element_text(size=15),
legend.key = element_blank(),
legend.title=element_text(size=17),
legend.background=element_blank(),
panel.border = element_blank()
)
}
## Define I/O ##
io <- list()
io$basedir <- "/Users/ricard/data/gastrulation_all"
io$sample_stats <- '/Users/ricard/gastrulation_all/met/stats/samples/out/sample_stats.txt'
io$sample_metadata <- paste0(io$basedir,"/sample_metadata.txt")
io$rna <- paste(io$basedir,"rna/parsed/sceset_filtered.rds",sep="/")
## Define options ##
opts <- list()
# Define stages and lineages
# opts$stage_lineage <- c("E4.5_EPI","E5.5_EPI","E6.5_EPI")
# opts$stage_lineage <- c("E6.5_EPI","E6.5_PS","E6.5_VE")
opts$stage_lineage <- c("E6.5_EPI")
# Filtering options
opts$min.cdr <- 0.5
opts$f.var <- 0.5
# Multiple testing correction options
opts$threshold_fdr <- 0.1
# Define which cells to use
opts$cells <- fread(io$sample_metadata) %>% .[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
.[pass_metQC==T & pass_rnaQC==T & outlier==F & stage_lineage%in%opts$stage_lineage,sample]
# Load sample metadata
sample_metadata <- fread(io$sample_metadata)[,c("sample","id_met","stage","lineage")] %>% .[sample%in%opts$cells] %>%
.[,stage_lineage:=paste(stage,lineage,sep="_")]
# Load RNA data
sceset <- readRDS(file=io$rna)
sceset_filt <- sceset[,colnames(sceset) %in% sample_metadata$sample]
rna <- exprs(sceset_filt) %>% t %>% as.data.table %>% .[,sample:=colnames(sceset_filt)] %>%
melt(id.vars = "sample", value.name = "expr", variable.name = "gene") %>%
merge(fData(sceset) %>% tibble::rownames_to_column("gene") %>% .[,c("gene","ens_id")] %>% setnames("ens_id","id"))
sample_stats <- fread(file=io$sample_stats, header=T, sep="\t", stringsAsFactors=F) %>% .[context=="CG"] %>%
setnames("id","id_met")
# Merge sample metadata with sample statistics
sample_metadata <- merge(sample_metadata, sample_stats , by="id_met")
# Merge expression data with sample metadata/stats
metrna <- merge(sample_metadata, rna, by="sample")
# Sort cells according to mean methylation rate
# sorted_cells <- sample_metadata %>% setkey(mean) %>% .[,sample]
# metrna[,sample:=factor(sample,levels=sorted_cells)]
# Remove genes that are not expressed
keep_genes <- metrna[,.(cdr=sum(expr>0)/.N), by="gene"] %>% .[cdr >= opts$min.cdr, gene]
metrna_filt <- metrna[gene %in% keep_genes]
# Remove lowly variable genes
keep_hv_sites <- metrna_filt[,.(var=var(expr)), by="gene"] %>% setorder(-var) %>% head(n = nrow(.) * opts$f.var) %>% .$gene
metrna_filt <- metrna_filt[gene %in% keep_hv_sites]
cor <- metrna_filt[, .(V1=unlist(cor.test(expr, mean, alternative="two.sided", method="pearson")[c("estimate","statistic","p.value")])), by=c("gene")] %>%
.[,para := c("r", "t", "p")] %>% dcast(gene~para,value.var="V1") %>%
.[, c("padj_fdr") := list(p.adjust(p, method="fdr"))] %>%
.[, c("log_padj_fdr") := list(-log10(padj_fdr))] %>%
.[,sig:=padj_fdr<=opts$threshold_fdr] %>% setorder(padj_fdr)
# print(cor[sig==TRUE])
negative_hits <- cor[sig==TRUE & r<0,gene]
positive_hits <- cor[sig==TRUE & r>0,gene]
p <- ggplot(cor, aes(x=r, y=-log10(p))) +
labs(title="", x="Pearson Correlation", y="-log10 p-value") +
geom_hline(yintercept = -log10(opts$threshold_fdr), color="blue") +
geom_segment(x=0, xend=0, y=0, yend=35, color="orange") +
geom_point(aes(color=sig)) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(-0.9,0.9)) +
# scale_y_continuous(limits=c(0,40)) +
ggrepel::geom_text_repel(data=cor[sig==T], aes(x=r, y=-log10(p), label=gene), size=6) +
# annotate("text", x=0, y=40, size=7, label=sprintf("(%d)",nrow(cor))) +
# annotate("text", x=-0.5, y=40, size=7, label=sprintf("%d (-)",length(negative_hits))) +
# annotate("text", x=0.5, y=40, size=7, label=sprintf("%d (+)",length(positive_hits))) +
theme(
plot.title=element_text(size=15, face='bold', margin=margin(0,20,0,0), hjust=0.5),
axis.text=element_text(size=rel(1.5), color='black'),
axis.title=element_text(size=rel(1.8), color='black'),
legend.position="none",
panel.border=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
print(p)
genes <- tail(cor[r>0] %>% setkey(r) %>% .[,gene], n=6)
tmp <- metrna_filt[gene %in% genes]
p <- ggplot(tmp, aes(x=mean, y=expr)) +
labs(title="", x="Cellular mean methylation rate", y="Expression") +
geom_point(aes(color=stage_lineage)) +
stat_smooth(method="lm", se=F, color="black", alpha=.25, linetype="dashed", size=1) +
scale_y_continuous(limits = c(min(tmp$expr),max(tmp$expr))) +
facet_wrap(~gene) +
scatter_theme()
print(p)
genes <- head(cor[r<0] %>% setkey(r) %>% .[,gene], n=6)
tmp <- metrna_filt[gene %in% genes]
p <- ggplot(tmp, aes(x=mean, y=expr)) +
labs(title="", x="Cellular mean methylation rate", y="Expression") +
geom_point(aes(color=stage_lineage)) +
stat_smooth(method="lm", se=F, color="black", alpha=.25, linetype="dashed", size=1) +
scale_y_continuous(limits = c(min(tmp$expr),max(tmp$expr))) +
facet_wrap(~gene) +
scatter_theme()
print(p)
genes <- c("Otx2")
tmp <- metrna_filt[gene %in% genes]
p <- ggplot(tmp, aes(x=mean, y=expr)) +
labs(title="", x="Cellular mean methylation rate", y="Expression") +
geom_point(aes(color=stage_lineage)) +
stat_smooth(method="lm", se=F, color="black", alpha=.25, linetype="dashed", size=1) +
scale_y_continuous(limits = c(min(tmp$expr),max(tmp$expr))) +
facet_wrap(~gene) +
scatter_theme()
print(p)
View(cor)
genes <- c("Otx2","Nanog")
tmp <- metrna_filt[gene %in% genes]
p <- ggplot(tmp, aes(x=mean, y=expr)) +
labs(title="", x="Cellular mean methylation rate", y="Expression") +
geom_point(aes(color=stage_lineage)) +
stat_smooth(method="lm", se=F, color="black", alpha=.25, linetype="dashed", size=1) +
scale_y_continuous(limits = c(min(tmp$expr),max(tmp$expr))) +
facet_wrap(~gene) +
scatter_theme()
print(p)
genes <- c("Otx2","Nanog","Lefty1","Lefty2")
tmp <- metrna_filt[gene %in% genes]
p <- ggplot(tmp, aes(x=mean, y=expr)) +
labs(title="", x="Cellular mean methylation rate", y="Expression") +
geom_point(aes(color=stage_lineage)) +
stat_smooth(method="lm", se=F, color="black", alpha=.25, linetype="dashed", size=1) +
scale_y_continuous(limits = c(min(tmp$expr),max(tmp$expr))) +
facet_wrap(~gene) +
scatter_theme()
print(p)
View(cor)
print(p)
library(data.table)
library(purrr)
library(ggplot2)
## Define I/O
io <- list()
io$in.metadata <- "/Users/ricard/data/gastrulation_all/sample_metadata.txt"
io$in.acc_data <- "/Users/ricard/data/gastrulation_all/acc/raw"
io$in.met_data <- "/Users/ricard/data/gastrulation_all/met/raw"
io$stats <- "/Users/ricard/gastrulation_all/met/stats/samples/out/sample_stats.txt"
## Define options
opts <- list()
# Define which stage and lineages to look at
opts$stage_lineage <- c("E4.5_EPI","E4.5_PE","E5.5_EPI","E6.5_EPI","E6.5_PS","E7.5_Ectoderm","E7.5_Cardiac")
# Define which cells to use
opts$met_cells <- fread(io$in.metadata) %>% .[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
.[pass_metQC==T & stage_lineage%in%opts$stage_lineage,id_met]
opts$acc_cells <- fread(io$in.metadata) %>% .[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
.[pass_accQC==T & stage_lineage%in%opts$stage_lineage,id_acc]
metadata <- fread(io$in.metadata) %>% .[id_met%in%opts$met_cells | id_acc%in%opts$acc_cells]
stats <- fread(io$stats)
stats <- rbind(
stats[context=="CG"] %>% merge(metadata[,c("id_met","stage","lineage")] %>% setnames("id_met","id"), by="id"),
stats[context=="GC"] %>% merge(metadata[,c("id_acc","stage","lineage")] %>% setnames("id_acc","id"), by="id")
) %>% .[,stage_lineage:=paste(stage,lineage,sep="_")]
stats[mean<1,mean:=mean*100]
foo <- stats[context=="GC",c("id","mean","stage_lineage")]
p <- ggplot(foo, aes(x=stage_lineage, y=mean)) +
geom_boxplot(alpha=1.0, fill="#00BFC4", outlier.shape = NA) +
geom_jitter(alpha=0.5, color="#00BFC4") +
ylab("Genome-wide mean accessibility rate") +
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_text(colour="black", angle=90, size=15, vjust=0.5, hjust=1.0),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
p
foo <- stats[context=="CG",c("id","mean","stage_lineage")]
p <- ggplot(foo, aes(x=stage_lineage, y=mean)) +
geom_boxplot(alpha=1.0, fill="#F8766D") +
ylab("Genome-wide mean rate") +
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_text(colour="black", angle=90, size=15, vjust=0.5, hjust=1.0),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
p
# pdf("/Users/ricard/NMT-seq/rebuttal/EB/stats/out/metacc_means.pdf")
# print(p)
# dev.off()
p <- ggplot(foo, aes(x=stage_lineage, y=mean)) +
geom_boxplot(alpha=1.0, fill="#F8766D") +
geom_jitter(alpha=0.5, color="#F8766D") +
ylab("Genome-wide mean rate") +
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_text(colour="black", angle=90, size=15, vjust=0.5, hjust=1.0),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
p
p <- ggplot(foo, aes(x=stage_lineage, y=mean)) +
geom_boxplot(alpha=1.0, fill="#F8766D", outlier.shape=NA) +
geom_jitter(alpha=0.75, color="#F8766D") +
ylab("Genome-wide mean rate") +
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_text(colour="black", angle=90, size=15, vjust=0.5, hjust=1.0),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
p
library(data.table)
library(purrr)
library(ggplot2)
## Define I/O
io <- list()
io$in.metadata <- "/Users/ricard/data/gastrulation_all/sample_metadata.txt"
io$in.acc_data <- "/Users/ricard/data/gastrulation_all/acc/raw"
io$in.met_data <- "/Users/ricard/data/gastrulation_all/met/raw"
io$stats <- "/Users/ricard/gastrulation_all/met/stats/samples/out/sample_stats.txt"
## Define options
opts <- list()
# Define which stage and lineages to look at
opts$stage_lineage <- c("E4.5_EPI","E4.5_PE","E5.5_EPI","E6.5_EPI","E6.5_VE","E6.5_PS","E7.5_Ectoderm","E7.5_Cardiac","E7.5_VE")
# Define which cells to use
opts$met_cells <- fread(io$in.metadata) %>% .[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
.[pass_metQC==T & stage_lineage%in%opts$stage_lineage,id_met]
opts$acc_cells <- fread(io$in.metadata) %>% .[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
.[pass_accQC==T & stage_lineage%in%opts$stage_lineage,id_acc]
metadata <- fread(io$in.metadata) %>% .[id_met%in%opts$met_cells | id_acc%in%opts$acc_cells]
met_stats <- data.table(id=opts$met_cells, context="CG", coverage=0, mean=NA)
acc_stats <- data.table(id=opts$acc_cells, context="GC", coverage=0, mean=NA)
# Load methylation
for (cell in opts$met_cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$in.met_data,cell))) {
print(sprintf("Loading %s methylation...",cell))
tmp <- fread(sprintf("zcat < %s/%s.tsv.gz",io$in.met_data,cell), sep="\t", verbose=F, showProgress=F) %>% setnames(c("chr","pos","rate"))
met_stats[id==cell & context=="CG",coverage:=nrow(tmp)]
met_stats[id==cell & context=="CG",mean:=mean(tmp$rate)]
} else {
print(sprintf("Sample %s not found for methylation",cell))
}
}
View(stats)
library(data.table)
library(purrr)
library(ggplot2)
## Define I/O
io <- list()
io$in.metadata <- "/Users/ricard/data/gastrulation_all/sample_metadata.txt"
io$in.acc_data <- "/Users/ricard/data/gastrulation_all/acc/raw"
io$in.met_data <- "/Users/ricard/data/gastrulation_all/met/raw"
io$stats <- "/Users/ricard/gastrulation_all/met/stats/samples/out/sample_stats.txt"
## Define options
opts <- list()
# Define which stage and lineages to look at
opts$stage_lineage <- c("E4.5_EPI","E4.5_PE","E5.5_EPI","E6.5_EPI","E6.5_VE","E6.5_PS","E7.5_Ectoderm","E7.5_Cardiac","E7.5_VE")
# Define which cells to use
opts$met_cells <- fread(io$in.metadata) %>% .[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
.[pass_metQC==T & stage_lineage%in%opts$stage_lineage,id_met]
opts$acc_cells <- fread(io$in.metadata) %>% .[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
.[pass_accQC==T & stage_lineage%in%opts$stage_lineage,id_acc]
metadata <- fread(io$in.metadata) %>% .[id_met%in%opts$met_cells | id_acc%in%opts$acc_cells]
met_stats <- data.table(id=opts$met_cells, context="CG", coverage=0, mean=0)
acc_stats <- data.table(id=opts$acc_cells, context="GC", coverage=0, mean=0)
# Load methylation
for (cell in opts$met_cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$in.met_data,cell))) {
print(sprintf("Loading %s methylation...",cell))
tmp <- fread(sprintf("zcat < %s/%s.tsv.gz",io$in.met_data,cell), sep="\t", verbose=F, showProgress=F) %>% setnames(c("chr","pos","rate"))
met_stats[id==cell & context=="CG",coverage:=nrow(tmp)]
met_stats[id==cell & context=="CG",mean:=mean(tmp$rate)]
} else {
print(sprintf("Sample %s not found for methylation",cell))
}
}
# Load accessibility
for (cell in opts$acc_cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$in.acc_data,cell))) {
print(sprintf("Loading %s accessibility...",cell))
tmp <- fread(sprintf("zcat < %s/%s.tsv.gz",io$in.acc_data,cell), sep="\t", verbose=F, showProgress=F) %>% setnames(c("chr","pos","rate"))
acc_stats[id==cell & context=="GC",coverage:=nrow(tmp)]
acc_stats[id==cell & context=="GC",mean:=mean(tmp$rate)]
} else {
print(sprintf("Sample %s not found for accessibility",cell))
}
}
stats <- rbind(acc_stats,met_stats)
fwrite(stats,file=io$stats, sep="\t", row.names=F, col.names=T)
stats <- fread(io$stats)
stats <- rbind(
stats[context=="CG"] %>% merge(metadata[,c("id_met","stage","lineage")] %>% setnames("id_met","id"), by="id"),
stats[context=="GC"] %>% merge(metadata[,c("id_acc","stage","lineage")] %>% setnames("id_acc","id"), by="id")
) %>% .[,stage_lineage:=paste(stage,lineage,sep="_")]
stats[mean<1,mean:=mean*100]
# Methylation
# foo <- stats[context=="CG" & pass_metQC==T,c("id","mean")]
foo <- stats[context=="CG",c("id","mean")]
foo %>% setkey(mean) %>% .[,id:=factor(id,levels=id)]
p <- ggplot(foo, aes(x=id, y=mean)) +
geom_bar(stat='identity', position="dodge", fill="red") +
scale_y_continuous(expand=c(0,0)) +
ylab("Genome-wide mean methylation rate") +
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
p
# Accessibility
# foo <- stats[context=="GC" & method=="NMT" & pass_accQC==T,c("id","mean")]
foo <- stats[context=="GC",c("id","mean")]
foo %>% setkey(mean) %>% .[,id:=factor(id,levels=id)]
p <- ggplot(foo, aes(x=id, y=mean)) +
geom_bar(stat='identity', position="dodge", fill="blue") +
scale_y_continuous(expand=c(0,0)) +
ylab("Genome-wide mean accessibility rate") +
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
p
foo <- stats[context=="GC",c("id","mean","stage_lineage")]
p <- ggplot(foo, aes(x=stage_lineage, y=mean)) +
geom_boxplot(alpha=1.0, fill="#00BFC4", outlier.shape = NA) +
geom_jitter(alpha=0.5, color="#00BFC4") +
ylab("Genome-wide mean accessibility rate") +
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_text(colour="black", angle=90, size=15, vjust=0.5, hjust=1.0),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
p
foo <- stats[context=="CG",c("id","mean","stage_lineage")]
p <- ggplot(foo, aes(x=stage_lineage, y=mean)) +
geom_boxplot(alpha=1.0, fill="#F8766D", outlier.shape=NA) +
geom_jitter(alpha=0.75, color="#F8766D") +
ylab("Genome-wide mean rate") +
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_text(colour="black", angle=90, size=15, vjust=0.5, hjust=1.0),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
p
# pdf("/Users/ricard/NMT-seq/rebuttal/EB/stats/out/metacc_means.pdf")
# print(p)
# dev.off()
foo <- stats[,c("id","context","mean")] %>% dcast(id~context, value.var="mean")
p <- ggplot(foo, aes(x=CG, y=GC)) +
geom_point() +
labs(x="Mean methylation rate", y="Mean accessibility rate") +
theme_bw() + theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,10,0,0)),
axis.title.x = element_text(colour="black", size=17, margin=margin(10,0,0,0)),
axis.text.x = element_text(colour="black", size=rel(1.5)),
axis.text.y = element_text(colour="black", size=rel(1.5))
)
p
