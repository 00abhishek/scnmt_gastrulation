ModelOptions = ModelOptions,
TrainOptions = TrainOptions
)
# Train the model
outfile <- paste0(io$outdir,"/test.hdf5")
model <- runMOFA(MOFAmodel, outfile)
# model <- loadModel(paste0(io$outdir,"/model.hdf5"))
sample_metadata_filt <- sample_metadata %>% setkey(cell) %>% .[MOFAtools::sampleNames(model)]
r2 <- calculateVarianceExplained(model)
plotVarianceExplained(model)
plotFactorScatter(model, factors=c("LF1","LF2"), color_by=sample_metadata_filt$group)
plotFactorCor(model)
cor(colMeans(model@TrainData$rna>0,na.rm=T), getFactors(model), use="complete.obs")
plotFactorScatter(model, factors=c("LF2","LF3"), color_by=sample_metadata_filt$group)
unique(sample_metadata$group)
library(data.table)
library(purrr)
library(ggplot2)
library(scater)
library(MOFAtools)
matrix.please <- function(x) {
m<-as.matrix(x[,-1])
rownames(m)<-x[[1]]
m
}
## Define I/O ##
io <- list()
io$basedir <- "/Users/ricard/data/holgerlab/cll"
io$sample.metadata <- paste0(io$basedir,"/sample_metadata.txt")
io$rna.file <- paste0(io$basedir,"/rna/sceset_QCed.RData")
io$outdir <- "/Users/ricard/holgerlab/cll/rna/out"
## Define options ##
opts <- list()
# Filtering options for RNA
opts$rna_rm.low <- T       # Remove low expressed genes
opts$rna_rm.const <- T     # Remove non-variable genes
opts$rna_min.cdr <- 0.25   # Remove genes with cellular detection rate smaller than opts$min.cdr
opts$rna_ngenes <- 5000    # maximum number of genes (filter based on variance)
# Define which cells to use
opts$group <- c("Lymph.T1","Lymph.UNT") # Blood.T1 Blood.UNT
opts$cells <- fread(io$sample.metadata) %>%
.[passQC==T,cell]
sample_metadata <- fread(io$sample.metadata) %>%
.[cell%in%opts$cells]
# Load scater object
# sce <- readRDS(io$rna.file)
load(io$rna.file)
sce <- sceset; rm(sceset)
# Filter cells
sce <- sce[,colnames(sce) %in% opts$cells]
# Convert to data.table
rna_dt <- exprs(sce) %>% t %>% as.data.table(keep.rownames = "cell") %>%
melt(id.vars = "cell", value.name = "expr", variable.name = "gene")
rna_dt <- merge(rna_dt, sample_metadata[,c("cell","group","pool")], by="cell")
# rna_dt <- rna_dt[pool%in%c("SCGRES_05_Pool2","SCGRES_05_Pool1")]
# Remove lowly expressed genes
# tmp <- rna_dt[,(mean(expr)),by="gene"]
# if (opts$rna_rm.low==TRUE) {
#     rna_dt <- rna_dt[,mean:=mean(expr),by="gene"] %>% .[mean>=1.0] %>% .[,mean:=NULL]
# }
# Remove genes with low variability
if (opts$rna_rm.const==TRUE) {
rna_dt <- rna_dt[,var:=var(expr),by="gene"] %>% .[var>0.25] %>% .[,var:=NULL]
}
# Filter genes with low cellular detection rate and sites with low coverage across samples
# tmp <- rna_dt[,(mean(expr>0)),by="gene"]
opts$rna_min.cdr <- 0.1
rna_dt <- rna_dt[,cdr:=mean(expr>0), by="gene"] %>% .[cdr>=opts$rna_min.cdr] %>% .[,cdr:=NULL]
# Extract top N highly variable genes
keep_hv_genes <- rna_dt[,.(var=var(expr)), by="gene"] %>% setorder(-var)  %>% head(n = opts$rna_ngenes) %>% .$gene
rna_dt <- rna_dt[gene%in%keep_hv_genes]
rna_dt <- rna_dt %>% droplevels()
rna_matrix <- rna_dt[,c("gene","expr","cell")] %>%
dcast(cell~gene, value.var="expr", drop=F) %>% matrix.please() %>% t
dim(rna_matrix)
# Create MOFAobject
MOFAobject <- createMOFAobject(list(rna=rna_matrix))
# Data processing options
DataOptions <- getDefaultDataOptions()
# Model options
ModelOptions <- getDefaultModelOptions(MOFAobject)
ModelOptions$numFactors <- 5
# Training options
TrainOptions <- getDefaultTrainOptions()
TrainOptions$maxiter <- 5000
TrainOptions$tolerance <- 0.05
TrainOptions$DropFactorThreshold <- 0.000
# Prepare MOFAobject for training
MOFAmodel <- prepareMOFA(MOFAobject,
DataOptions = DataOptions,
ModelOptions = ModelOptions,
TrainOptions = TrainOptions
)
# Train the model
outfile <- paste0(io$outdir,"/test.hdf5")
model <- runMOFA(MOFAmodel, outfile)
# model <- loadModel(paste0(io$outdir,"/model.hdf5"))
sample_metadata_filt <- sample_metadata %>% setkey(cell) %>% .[MOFAtools::sampleNames(model)]
plotFactorScatter(model, factors=c("LF1","LF2"), color_by=sample_metadata_filt$group)
opts$cells <- fread(io$sample.metadata) %>%
.[passQC==T & group%in%opts$group,cell]
opts$cells
library(data.table)
library(purrr)
library(ggplot2)
library(scater)
library(MOFAtools)
matrix.please <- function(x) {
m<-as.matrix(x[,-1])
rownames(m)<-x[[1]]
m
}
## Define I/O ##
io <- list()
io$basedir <- "/Users/ricard/data/holgerlab/cll"
io$sample.metadata <- paste0(io$basedir,"/sample_metadata.txt")
io$rna.file <- paste0(io$basedir,"/rna/sceset_QCed.RData")
io$outdir <- "/Users/ricard/holgerlab/cll/rna/out"
## Define options ##
opts <- list()
# Filtering options for RNA
opts$rna_rm.low <- T       # Remove low expressed genes
opts$rna_rm.const <- T     # Remove non-variable genes
opts$rna_min.cdr <- 0.25   # Remove genes with cellular detection rate smaller than opts$min.cdr
opts$rna_ngenes <- 5000    # maximum number of genes (filter based on variance)
# Define which cells to use
opts$group <- c("Lymph.T1","Lymph.UNT") # Blood.T1 Blood.UNT
opts$cells <- fread(io$sample.metadata) %>%
.[passQC==T & group%in%opts$group,cell]
sample_metadata <- fread(io$sample.metadata) %>%
.[cell%in%opts$cells]
# Load scater object
# sce <- readRDS(io$rna.file)
load(io$rna.file)
sce <- sceset; rm(sceset)
# Filter cells
sce <- sce[,colnames(sce) %in% opts$cells]
# Convert to data.table
rna_dt <- exprs(sce) %>% t %>% as.data.table(keep.rownames = "cell") %>%
melt(id.vars = "cell", value.name = "expr", variable.name = "gene")
rna_dt <- merge(rna_dt, sample_metadata[,c("cell","group","pool")], by="cell")
# rna_dt <- rna_dt[pool%in%c("SCGRES_05_Pool2","SCGRES_05_Pool1")]
# Remove lowly expressed genes
# tmp <- rna_dt[,(mean(expr)),by="gene"]
# if (opts$rna_rm.low==TRUE) {
#     rna_dt <- rna_dt[,mean:=mean(expr),by="gene"] %>% .[mean>=1.0] %>% .[,mean:=NULL]
# }
# Remove genes with low variability
if (opts$rna_rm.const==TRUE) {
rna_dt <- rna_dt[,var:=var(expr),by="gene"] %>% .[var>0.25] %>% .[,var:=NULL]
}
# Filter genes with low cellular detection rate and sites with low coverage across samples
# tmp <- rna_dt[,(mean(expr>0)),by="gene"]
opts$rna_min.cdr <- 0.1
rna_dt <- rna_dt[,cdr:=mean(expr>0), by="gene"] %>% .[cdr>=opts$rna_min.cdr] %>% .[,cdr:=NULL]
# Extract top N highly variable genes
keep_hv_genes <- rna_dt[,.(var=var(expr)), by="gene"] %>% setorder(-var)  %>% head(n = opts$rna_ngenes) %>% .$gene
rna_dt <- rna_dt[gene%in%keep_hv_genes]
rna_dt <- rna_dt %>% droplevels()
rna_matrix <- rna_dt[,c("gene","expr","cell")] %>%
dcast(cell~gene, value.var="expr", drop=F) %>% matrix.please() %>% t
dim(rna_matrix)
# Create MOFAobject
MOFAobject <- createMOFAobject(list(rna=rna_matrix))
# Data processing options
DataOptions <- getDefaultDataOptions()
# Model options
ModelOptions <- getDefaultModelOptions(MOFAobject)
ModelOptions$numFactors <- 5
# Training options
TrainOptions <- getDefaultTrainOptions()
TrainOptions$maxiter <- 5000
TrainOptions$tolerance <- 0.05
TrainOptions$DropFactorThreshold <- 0.000
# Prepare MOFAobject for training
MOFAmodel <- prepareMOFA(MOFAobject,
DataOptions = DataOptions,
ModelOptions = ModelOptions,
TrainOptions = TrainOptions
)
# Train the model
outfile <- paste0(io$outdir,"/test.hdf5")
model <- runMOFA(MOFAmodel, outfile)
# model <- loadModel(paste0(io$outdir,"/model.hdf5"))
sample_metadata_filt <- sample_metadata %>% setkey(cell) %>% .[MOFAtools::sampleNames(model)]
plotFactorScatter(model, factors=c("LF1","LF2"), color_by=sample_metadata_filt$group)
plotFactorScatter(model, factors=c("LF1","LF2"), color_by=sample_metadata_filt$group)
plotFactorCor(model)
cor(colMeans(model@TrainData$rna>0,na.rm=T), getFactors(model), use="complete.obs")
# plotFactorScatters(model, factors=c(1,2,3,4), color_by=sample_metadata_filt$batch)
plotFactorScatter(model, factors=c("LF2","LF3"), color_by=sample_metadata_filt$group)
# plotFactorScatter(model, factors=c("LF1","LF2"), color_by="CD19")
# plotFactorBeeswarm(model, factors="LF5", color_by="CD74")
plotFactorScatter(model, factors=c("LF3","LF4"), color_by=sample_metadata_filt$group)
plotWeights(model, view="rna", factor="LF1", abs=F, nfeatures = 20)
plotWeights(model, view="rna", factor="LF2", abs=F, nfeatures = 20)
plotFactorScatter(model, factors=c("LF1","LF2"), color_by=sample_metadata_filt$group)
plotWeights(model, view="rna", factor="LF3", abs=F, nfeatures = 20)
plotFactorScatters(model, factors="all", color_by=sample_metadata_filt$group)
# plotFactorScatter(model, factors=c("LF1","LF2"), color_by=sample_metadata_filt$group)
# plotFactorScatter(model, factors=c("LF1","LF2"), color_by="CD19")
# plotFactorBeeswarm(model, factors="LF5", color_by="CD74")
cor(colMeans(model@TrainData$rna>0,na.rm=T), getFactors(model), use="complete.obs")
cdr <- colMeans(getTrainData(model)$rna>0,na.rm=TRUE)
factor <- getFactors(model, factors="LF2")[,1]
foo <- data.frame(factor = factor, cdr = cdr)
ggplot(foo, aes_string(x = "factor", y = "cdr")) +
geom_point() + xlab("Factor") +
ylab("Cellular Detection Rate") +
stat_smooth(method="lm") +
theme_bw()
cor(colMeans(model@TrainData$rna>0,na.rm=T), getFactors(model), use="complete.obs")
cdr <- colMeans(getTrainData(model)$rna>0,na.rm=TRUE)
factor <- getFactors(model, factors="LF1")[,1]
foo <- data.frame(factor = factor, cdr = cdr)
ggplot(foo, aes_string(x = "factor", y = "cdr")) +
geom_point() + xlab("Factor") +
ylab("Cellular Detection Rate") +
stat_smooth(method="lm") +
theme_bw()
cor(colMeans(model@TrainData$rna>0,na.rm=T), getFactors(model), use="complete.obs")
cdr <- colSums(getTrainData(model)$rna>0,na.rm=TRUE)
factor <- getFactors(model, factors="LF1")[,1]
foo <- data.frame(factor = factor, cdr = cdr)
ggplot(foo, aes_string(x = "factor", y = "cdr")) +
geom_point() + xlab("Factor") +
ylab("Number of expressed genes") +
stat_smooth(method="lm") +
theme_bw()
plotWeights(model, view="rna", factor="LF1", abs=F, nfeatures = 20)
plotWeights(model, view="rna", factor="LF1", abs=F, nfeatures = 0)
viewNames(model)
getWeights(model, views="rna", factor=1)
sort(getWeights(model, views="rna", factor=1)[[1]])
head(sort(getWeights(model, views="rna", factor=1)[[1]]))
getWeights(model, views="rna", factor=1)[[1]]
head(sort(getWeights(model, views="rna", factor=1)[[1]][,1]))
head(sort(getWeights(model, views="rna", factor=1)[[1]][,1]), n=20)
names(head(sort(getWeights(model, views="rna", factor=1)[[1]][,1]), n=25))
plotFactorScatter(model, factors=c("LF1","LF2"), color_by=sample_metadata_filt$group)
unique(sample_metadata_filt$group)
model_i <- subsetSamples(model, sample_metadata_filt[group=="Lymph.T1",cell])
cor(colMeans(model@TrainData$rna>0,na.rm=T), getFactors(model_i), use="complete.obs")
cor(colMeans(mode_il@TrainData$rna>0,na.rm=T), getFactors(model_i), use="complete.obs")
cor(colMeans(model_i@TrainData$rna>0,na.rm=T), getFactors(model_i), use="complete.obs")
cdr <- colSums(getTrainData(model_i)$rna>0,na.rm=TRUE)
factor <- getFactors(model_i, factors="LF1")[,1]
foo <- data.frame(factor = factor, cdr = cdr)
ggplot(foo, aes_string(x = "factor", y = "cdr")) +
geom_point() + xlab("Factor") +
ylab("Number of expressed genes") +
stat_smooth(method="lm") +
theme_bw()
factor <- getFactors(model_i, factors="LF2")[,1]
foo <- data.frame(factor = factor, cdr = cdr)
ggplot(foo, aes_string(x = "factor", y = "cdr")) +
geom_point() + xlab("Factor") +
ylab("Number of expressed genes") +
stat_smooth(method="lm") +
theme_bw()
plotWeights(model, view="rna", factor="LF2", abs=F, nfeatures = 20)
plotFactorScatter(model, factors=c("LF1","LF3"), color_by=sample_metadata_filt$group)
sample_metadata_filt$group
model_i <- subsetSamples(model, sample_metadata_filt[group=="Lymph.UNT",cell])
cor(colMeans(model_i@TrainData$rna>0,na.rm=T), getFactors(model_i), use="complete.obs")
cdr <- colSums(getTrainData(model_i)$rna>0,na.rm=TRUE)
factor <- getFactors(model_i, factors="LF3")[,1]
foo <- data.frame(factor = factor, cdr = cdr)
ggplot(foo, aes_string(x = "factor", y = "cdr")) +
geom_point() + xlab("Factor") +
ylab("Number of expressed genes") +
stat_smooth(method="lm") +
theme_bw()
plotWeights(model, view="rna", factor="LF3", abs=F, nfeatures = 20)
plotFactorScatter(model, factors=c("LF1","LF4"), color_by=sample_metadata_filt$group)
plotFactorScatter(model, factors=c("LF2","LF4"), color_by=sample_metadata_filt$group)
plotFactorBeeswarm(model, factors="LF4")
plotFactorBeeswarm(model, factors="LF4", sample_metadata_filt$group)
plotWeights(model, view="rna", factor="LF4", abs=F, nfeatures = 20)
plotFactorBeeswarm(model, factors="LF5", sample_metadata_filt$group)
plotWeights(model, view="rna", factor="LF5", abs=F, nfeatures = 20)
model_i <- subsetSamples(model, sample_metadata_filt[group=="Lymph.UNT",cell])
cor(colMeans(model_i@TrainData$rna>0,na.rm=T), getFactors(model_i), use="complete.obs")
cdr <- colSums(getTrainData(model_i)$rna>0,na.rm=TRUE)
factor <- getFactors(model_i, factors="LF5")[,1]
foo <- data.frame(factor = factor, cdr = cdr)
ggplot(foo, aes_string(x = "factor", y = "cdr")) +
geom_point() + xlab("Factor") +
ylab("Number of expressed genes") +
stat_smooth(method="lm") +
theme_bw()
model_i <- subsetSamples(model, sample_metadata_filt[group=="Lymph.T1",cell])
cor(colMeans(model_i@TrainData$rna>0,na.rm=T), getFactors(model_i), use="complete.obs")
cdr <- colSums(getTrainData(model_i)$rna>0,na.rm=TRUE)
factor <- getFactors(model_i, factors="LF5")[,1]
foo <- data.frame(factor = factor, cdr = cdr)
ggplot(foo, aes_string(x = "factor", y = "cdr")) +
geom_point() + xlab("Factor") +
ylab("Number of expressed genes") +
stat_smooth(method="lm") +
theme_bw()
# I/O MSigDB
io$msigFile <- "/Users/ricard/data/MSigDB/v6.0/homo_sapiens/C2/binary_matrix.rds"
# Load MSigDB files
feature.sets <- readRDS(io$msigFile)
# MOFAtools::featureNames(model)[["rna"]] <- toupper(MOFAtools::featureNames(model)[["rna"]])
fsea.out <- runEnrichmentAnalysis(
model,
view = "rna",
feature.sets = feature.sets,
statistical.test = "cor.adj.parametric",
alpha = 0.01
)
featureNames(model)
MOFAtools::featureNames(model)
MOFAtools::featureNames(model)[["rna"]] <- toupper(MOFAtools::featureNames(model)[["rna"]])
fsea.out <- runEnrichmentAnalysis(
model,
view = "rna",
feature.sets = feature.sets,
statistical.test = "cor.adj.parametric",
alpha = 0.01
)
rownames(feature.sets)
colnames(feature.sets)
io$msigFile <- "/Users/ricard/data/MSigDB/v6.0/homo_sapiens/C5/bp_binary_matrix.rds"
# Load MSigDB files
feature.sets <- readRDS(io$msigFile)
colnames(feature.sets)
gene_metadata <- fread("/Users/ricard/data/ensembl/human/v87/BioMart/mRNA/Hsapiens_genes_BioMart.87.txt")
gene_metadata <- fread("/Users/ricard/data/ensembl/human/v87/BioMart/mRNA/Hsapiens_genes_BioMart.87.txt")
foo <- gene_metadata$symbol
foo <- gene_metadata$ens_id
names(foo) <- toupper(gene_metadata$symbol)
featureNames(model)
MOFAtools::featureNames(model)
MOFAtools::featureNames(model)$rna %in% foo$symbol
MOFAtools::featureNames(model)$rna %in% foo
MOFAtools::featureNames(model)$rna %in% names(foo)
library(data.table)
library(purrr)
library(ggplot2)
library(scater)
library(MOFAtools)
matrix.please <- function(x) {
m<-as.matrix(x[,-1])
rownames(m)<-x[[1]]
m
}
## Define I/O ##
io <- list()
io$basedir <- "/Users/ricard/data/holgerlab/cll"
io$sample.metadata <- paste0(io$basedir,"/sample_metadata.txt")
io$rna.file <- paste0(io$basedir,"/rna/sceset_QCed.RData")
io$outdir <- "/Users/ricard/holgerlab/cll/rna/out"
## Define options ##
opts <- list()
# Filtering options for RNA
opts$rna_rm.low <- T       # Remove low expressed genes
opts$rna_rm.const <- T     # Remove non-variable genes
opts$rna_min.cdr <- 0.25   # Remove genes with cellular detection rate smaller than opts$min.cdr
opts$rna_ngenes <- 5000    # maximum number of genes (filter based on variance)
# Define which cells to use
opts$group <- c("Lymph.T1","Lymph.UNT") # Blood.T1 Blood.UNT
opts$cells <- fread(io$sample.metadata) %>%
.[passQC==T & group%in%opts$group,cell]
sample_metadata <- fread(io$sample.metadata) %>%
.[cell%in%opts$cells]
# Load scater object
# sce <- readRDS(io$rna.file)
load(io$rna.file)
sce <- sceset; rm(sceset)
# Filter cells
sce <- sce[,colnames(sce) %in% opts$cells]
# Convert to data.table
rna_dt <- exprs(sce) %>% t %>% as.data.table(keep.rownames = "cell") %>%
melt(id.vars = "cell", value.name = "expr", variable.name = "gene") %>%
.[,gene:=toupper(gene)]
gene_metadata <- fread("/Users/ricard/data/ensembl/human/v87/BioMart/mRNA/Hsapiens_genes_BioMart.87.txt") %>%
.[,symbol:=toupper(symbol)]
rna_dt <- rna_dt[gene%in%gene_metadata$symbol]
gene_metadata %>% .[symbol%in%rna_dt$gene]
gene_metadata <- gene_metadata %>% .[symbol%in%rna_dt$gene]
unique(rna_dt$gene)
library(data.table)
library(purrr)
library(ggplot2)
library(scater)
library(MOFAtools)
matrix.please <- function(x) {
m<-as.matrix(x[,-1])
rownames(m)<-x[[1]]
m
}
## Define I/O ##
io <- list()
io$basedir <- "/Users/ricard/data/holgerlab/cll"
io$sample.metadata <- paste0(io$basedir,"/sample_metadata.txt")
io$rna.file <- paste0(io$basedir,"/rna/sceset_QCed.RData")
io$outdir <- "/Users/ricard/holgerlab/cll/rna/out"
## Define options ##
opts <- list()
# Filtering options for RNA
opts$rna_rm.low <- T       # Remove low expressed genes
opts$rna_rm.const <- T     # Remove non-variable genes
opts$rna_min.cdr <- 0.25   # Remove genes with cellular detection rate smaller than opts$min.cdr
opts$rna_ngenes <- 5000    # maximum number of genes (filter based on variance)
# Define which cells to use
opts$group <- c("Lymph.T1","Lymph.UNT") # Blood.T1 Blood.UNT
opts$cells <- fread(io$sample.metadata) %>%
.[passQC==T & group%in%opts$group,cell]
sample_metadata <- fread(io$sample.metadata) %>%
.[cell%in%opts$cells]
# Load scater object
# sce <- readRDS(io$rna.file)
load(io$rna.file)
sce <- sceset; rm(sceset)
# Filter cells
sce <- sce[,colnames(sce) %in% opts$cells]
# Convert to data.table
rna_dt <- exprs(sce) %>% t %>% as.data.table(keep.rownames = "cell") %>%
melt(id.vars = "cell", value.name = "expr", variable.name = "gene") %>%
.[,gene:=toupper(gene)]
gene_metadata <- fread("/Users/ricard/data/ensembl/human/v87/BioMart/mRNA/Hsapiens_genes_BioMart.87.txt") %>%
.[,symbol:=toupper(symbol)]
rna_dt <- rna_dt[gene%in%gene_metadata$symbol]
gene_metadata <- gene_metadata %>% .[symbol%in%rna_dt$gene]
rna_dt <- merge(rna_dt, sample_metadata[,c("cell","group","pool")], by="cell")
# rna_dt <- rna_dt[pool%in%c("SCGRES_05_Pool2","SCGRES_05_Pool1")]
# Remove lowly expressed genes
# tmp <- rna_dt[,(mean(expr)),by="gene"]
# if (opts$rna_rm.low==TRUE) {
#     rna_dt <- rna_dt[,mean:=mean(expr),by="gene"] %>% .[mean>=1.0] %>% .[,mean:=NULL]
# }
# Remove genes with low variability
if (opts$rna_rm.const==TRUE) {
rna_dt <- rna_dt[,var:=var(expr),by="gene"] %>% .[var>0.25] %>% .[,var:=NULL]
}
# Filter genes with low cellular detection rate and sites with low coverage across samples
# tmp <- rna_dt[,(mean(expr>0)),by="gene"]
opts$rna_min.cdr <- 0.1
rna_dt <- rna_dt[,cdr:=mean(expr>0), by="gene"] %>% .[cdr>=opts$rna_min.cdr] %>% .[,cdr:=NULL]
# Extract top N highly variable genes
keep_hv_genes <- rna_dt[,.(var=var(expr)), by="gene"] %>% setorder(-var)  %>% head(n = opts$rna_ngenes) %>% .$gene
rna_dt <- rna_dt[gene%in%keep_hv_genes]
rna_dt <- rna_dt %>% droplevels()
rna_matrix <- rna_dt[,c("gene","expr","cell")] %>%
dcast(cell~gene, value.var="expr", drop=F) %>% matrix.please() %>% t
dim(rna_matrix)
# Create MOFAobject
MOFAobject <- createMOFAobject(list(rna=rna_matrix))
# Data processing options
DataOptions <- getDefaultDataOptions()
# Model options
ModelOptions <- getDefaultModelOptions(MOFAobject)
ModelOptions$numFactors <- 5
# Training options
TrainOptions <- getDefaultTrainOptions()
TrainOptions$maxiter <- 5000
TrainOptions$tolerance <- 0.05
TrainOptions$DropFactorThreshold <- 0.000
# Prepare MOFAobject for training
MOFAmodel <- prepareMOFA(MOFAobject,
DataOptions = DataOptions,
ModelOptions = ModelOptions,
TrainOptions = TrainOptions
)
# Train the model
outfile <- paste0(io$outdir,"/test.hdf5")
model <- runMOFA(MOFAmodel, outfile)
# I/O MSigDB
io$msigFile <- "/Users/ricard/data/MSigDB/v6.0/homo_sapiens/C2/binary_matrix.rds"
io$msigFile <- "/Users/ricard/data/MSigDB/v6.0/homo_sapiens/C5/bp_binary_matrix.rds"
# Load MSigDB files
feature.sets <- readRDS(io$msigFile)
fsea.out <- runEnrichmentAnalysis(
model,
view = "rna",
feature.sets = feature.sets,
statistical.test = "cor.adj.parametric",
alpha = 0.01
)
MOFAtools::featureNames(model)
MOFAtools::featureNames(model)$rna
MOFAtools::featureNames(model)$rna %in% colnames(feature.sets)
foo <- gene_metadata$ens_id
names(foo) <- gene_metadata$symbol
foo[MOFAtools::featureNames(model)$rna]
featureNames(model)$rna <- foo[MOFAtools::featureNames(model)$rna]
MOFAtools::featureNames(model)$rna <- foo[MOFAtools::featureNames(model)$rna]
MOFAtools::featureNames(model)$rna %in% colnames(feature.sets)
fsea.out <- runEnrichmentAnalysis(
model,
view = "rna",
feature.sets = feature.sets,
statistical.test = "cor.adj.parametric",
alpha = 0.01
)
View(fsea.out$pval.adj)
# I/O MSigDB
io$msigFile <- "/Users/ricard/data/MSigDB/v6.0/homo_sapiens/C2/binary_matrix.rds"
# io$msigFile <- "/Users/ricard/data/MSigDB/v6.0/homo_sapiens/C5/bp_binary_matrix.rds"
# Load MSigDB files
feature.sets <- readRDS(io$msigFile)
fsea.out <- runEnrichmentAnalysis(
model,
view = "rna",
feature.sets = feature.sets,
statistical.test = "cor.adj.parametric",
alpha = 0.01
)
View(fsea.out$pval.adj)
