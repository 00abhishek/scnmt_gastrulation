suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(weights))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(data.table))
source("/Users/ricard/NMT-seq_ESC/correlations/utils.R")
# Data
io   <- list()
io$base_dir   <- "/Users/ricard/data/gastrulation"
io$in.sample_metadata <- paste0(io$base_dir,"/sample_metadata_scNMT.txt")
io$annos_dir  <- paste0(io$base_dir, "/features/filt")
io$rna_file   <- paste0(io$base_dir, "/rna/parsed/sceset_scNMT.rds")
io$met_dir   <- paste0(io$base_dir, "/met/parsed")
io$outdir <- "/Users/ricard/gastrulation/metrna/coupling/out"
io$gene_metadata <- "/Users/ricard/data/ensembl/mouse/v87/BioMart/mRNA/Mmusculus_genes_BioMart.87.txt"
# Filtering parameters
opts <- list()
opts$min.CpGs <- 3       # Minimum number of CpGs per feature
opts$gene_window <- 1e4  # window length for the overlap between genes and features
# Multiple testing options
opts$threshold_fdr  <- 0.01   # pvalue threshold for significance in FDR
# Correlation type options
opts$method <- "pearson"      # correlation type
opts$weight <- FALSE          # weighted correlation?
# Permutation test options
opts$permutation <- TRUE   # do permutation test?
opts$n_perms <- 10         # Number of permutations
# Define genomic contexts
opts$annos <- c(
"genebody",
# "prom_2000_2000_cgi",
# "prom_2000_2000_noncgi",
# "prom_2000_2000",
"CGI",
# "H3K27ac_distal_E7.5_union_500",
# "H3K27ac_promoter_E7.5_union_500",
# "H3K4me3_E7.5_union",
"LINE"="LINE",
"LTR"="LTR"
)
# Define stage and lineages
opts$stage_lineage <- c(
"E4.5_EPI",#"E4.5_PE",
"E5.5_EPI",#"E5.5_PE",
"E6.5_EPI","E6.5_PS",#"E6.5_VE",
"E7.5_Ectoderm","E7.5_Mesoderm","E7.5_Endoderm"
)
# Define which cells to use
foo <- fread(io$in.sample_metadata) %>%
.[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
.[pass_metQC==T & pass_rnaQC==T & stage_lineage%in%opts$stage_lineage]
# .[pass_metQC==T & pass_rnaQC==T & stage_lineage%in%opts$stage_lineage & KO_3b=="not"]
opts$rna.cells <- foo$id_rna
opts$met.cells <- foo$id_met
sample_metadata <- fread(io$in.sample_metadata, stringsAsFactors=T) %>%
.[,c("id_rna","id_met","sample","stage","lineage")] %>%
.[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
.[sample%in%foo$sample]
cor <- fread(paste0(io$outdir,"/metrna_coupling.txt"))
cor
tmp <- merge(cor, sample_metadata[,c("sample","stage","stage_lineage")], by="sample") %>%
.[anno%in%names(subset_annos)] %>%
.[,anno:=stringr::str_replace_all(anno, subset_annos)] %>%
.[,anno:=factor(anno,levels=subset_annos)]
subset_annos <- c("genebody"="Gene\nbodies", "CGI"="CpG\nislands", "LINE"="LINE", "LTR"="LTR")
tmp <- merge(cor, sample_metadata[,c("sample","stage","stage_lineage")], by="sample") %>%
.[anno%in%names(subset_annos)] %>%
.[,anno:=stringr::str_replace_all(anno, subset_annos)] %>%
.[,anno:=factor(anno,levels=subset_annos)]
head(tmp)
foo1 <- cor[stage==stage1]
foo1 <- tmp[stage==stage1]
stage1="E4.5"
stage_transitions <- c(
"E4.5"="E5.5",
"E5.5"="E6.5",
"E.5"="E7.5"
)
stage2 <- stage_transitions[stage1]
foo1 <- tmp[stage==stage1]
foo2 <- tmp[stage==stage1]
foo2
foo1
foo2
foo1
foo2 <- tmp[stage==stage2]
hist(foo1$r)
hist(foo2$r)
p.value <- t.test(foo1$r,foo2$r)
p.value <- t.test(foo1$r,foo2$r)$p.value
p.value
for (stage1 in names(stage_transitions)) {
stage2 <- stage_transitions[stage1]
foo1 <- tmp[stage==stage1]
foo2 <- tmp[stage==stage2]
p.value <- t.test(foo1$r,foo2$r)$p.value
cat(sprintf("%s to %s: %.10f",stage1,stage2,p.value))
}
unique(tmp$anno)
for (stage1 in names(stage_transitions)) {
for (i in subset_annos) {
stage2 <- stage_transitions[stage1]
foo1 <- tmp[stage==stage1 & anno==i]
foo2 <- tmp[stage==stage2 & anno==i]
p.value <- t.test(foo1$r,foo2$r)$p.value
cat(sprintf("%s to %s, %s: %.10f\n",stage1,stage2,i,p.value))
}
}
foo1
foo2
i
tmp
tmp[stage==stage1]
stage1
stage_transitions <- c(
"E4.5"="E5.5",
"E5.5"="E6.5",
"E6.5"="E7.5"
)
subset_annos <- c("genebody"="Gene\nbodies", "CGI"="CpG\nislands", "LINE"="LINE", "LTR"="LTR")
tmp <- merge(cor, sample_metadata[,c("sample","stage","stage_lineage")], by="sample") %>%
.[anno%in%names(subset_annos)] %>%
.[,anno:=stringr::str_replace_all(anno, subset_annos)] %>%
.[,anno:=factor(anno,levels=subset_annos)]
for (stage1 in names(stage_transitions)) {
for (i in subset_annos) {
stage2 <- stage_transitions[stage1]
foo1 <- tmp[stage==stage1 & anno==i]
foo2 <- tmp[stage==stage2 & anno==i]
p.value <- t.test(foo1$r,foo2$r)$p.value
cat(sprintf("%s to %s, %s: %.10f\n",stage1,stage2,i,p.value))
}
}
print(sprintf("%s to %s, %s: %.10f\n",stage1,stage2,i,p.value))
for (stage1 in names(stage_transitions)) {
for (i in subset_annos) {
stage2 <- stage_transitions[stage1]
foo1 <- tmp[stage==stage1 & anno==i]
foo2 <- tmp[stage==stage2 & anno==i]
p.value <- t.test(foo1$r,foo2$r)$p.value
print(sprintf("%s to %s, %s: %.10f\n",stage1,stage2,i,p.value))
}
print("\n")
}
for (stage1 in names(stage_transitions)) {
for (i in subset_annos) {
stage2 <- stage_transitions[stage1]
foo1 <- tmp[stage==stage1 & anno==i]
foo2 <- tmp[stage==stage2 & anno==i]
p.value <- t.test(foo1$r,foo2$r)$p.value
print(sprintf("%s to %s, %s: %.10f\n",stage1,stage2,i,p.value))
}
cat("\n")
}
