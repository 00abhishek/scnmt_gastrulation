library(cowplot)
barplot_theme <- function() {
p <- theme(
plot.title = element_text(size=20, hjust=0.5),
# axis.title.x = element_text(colour="black", size=25, vjust=1.5),
axis.title.x = element_blank(),
axis.title.y = element_text(colour="black", size=15),
# axis.text.x = element_text(colour="black",size=rel(1.6)),
axis.text.y = element_text(colour="black",size=rel(1.2)),
axis.line = element_line(colour="black", size=rel(0.7)),
axis.ticks.x = element_line(colour="black", size=rel(0.7)),
axis.ticks.y = element_line(colour="black", size=rel(0.7)),
legend.position="none",
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
}
## I/O ##
io <- list()
# io$sample.metadata <- "/Users/ricard/data/gastrulation/sample_metadata.txt"
# io$in.metdir <- "/Users/ricard/data/gastrulation/met/cpg_level"
# io$outdir <- "/Users/ricard/gastrulation/met/QC/out"
io$sample.metadata <- "/Users/ricard/data/gastrulation_scBS/sample_metadata.txt"
io$in.metdir <- "/Users/ricard/data/gastrulation_scBS/met/cpg_level/E4.5_scBS"
# io$outdir <- "/Users/ricard/gastrulation/met/QC/out"
## Options ##
opts <- list()
# Define which cells to use
opts$cells <- fread(io$sample.metadata) %>% .[plate=="E4.5_scBS_Plate4" & !is.na(id_met),id_met]
# Filtering options
# opts$mapping_threshold <- 0.10
opts$met_coverage_threshold <- 1e5
metadata <- fread(io$sample.metadata)[id_met%in%opts$cells]
stats <- data.table(id_met=opts$cells, coverage=0)
for (cell in opts$cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$in.metdir,cell))) {
# print(sprintf("Loading %s...",cell))
tmp <- fread(sprintf("zcat < %s/%s.tsv.gz",io$in.metdir,cell), sep="\t", verbose=F, showProgress=F) %>% .[,c(1,2,5)] %>% setnames(c("chr","pos","rate"))
stats[id_met==cell,coverage:=nrow(tmp)]
} else {
print(sprintf("Sample %s not found",cell))
}
}
# fwrite(stats,file=io$statsfile, sep="\t", row.names=F, col.names=T)
# stats <- fread(io$statsfile) %>% .[sample%in%opts$cells] %>% merge(metadata,by="sample")
tmp <- stats[,c("id_met","coverage")] %>% setkey(coverage) %>% .[,id_met:=factor(id_met,levels=id_met)]
tmp$cellcolor <- c("black","red")[as.numeric(tmp$coverage < opts$met_coverage_threshold)+1]
p1 <- ggplot(tmp, aes(x=id_met, y=coverage)) +
geom_bar(stat="identity", position="dodge", fill="#F8766D", color="black") +
labs(title="", x="", y="Number of observed CpG sites") +
geom_hline(yintercept=opts$met_coverage_threshold, colour="black", linetype="dashed") +
barplot_theme() +
scale_y_continuous(expand=c(0,0), limits=c(0,6e+6)) +
# scale_y_continuous(expand=c(0,0), limits=c(0,7.5e+6)) +
theme(
# axis.text.x = element_text(angle=90, size=9, vjust=0.5, hjust=1.0, color=tmp$cellcolor)
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
print(p1)
print("Fail QC for methylation:")
failqc <- stats[coverage<opts$met_coverage_threshold,id_met]
print(failqc)
# metadata_all <- fread(io$sample.metadata)
# metadata_all[plate=="E7.5_Plate3", pass_metQC:=ifelse(id_met%in%failqc,"FALSE","TRUE")]
# fwrite(metadata_all, file=io$sample.metadata, sep="\t", col.names = T, row.names = F, quote=F, na="NA")
# p <- cowplot::plot_grid(p1, p2, ncol=2, nrow=1)
# pdf(file=paste0(io$outdir,"/metacc.pdf"), width=19, height=7)
# print(p)
# dev.off()
library(data.table)
library(purrr)
library(tidyr)
library(ggplot2)
library(cowplot)
barplot_theme <- function() {
p <- theme(
plot.title = element_text(size=20, hjust=0.5),
# axis.title.x = element_text(colour="black", size=25, vjust=1.5),
axis.title.x = element_blank(),
axis.title.y = element_text(colour="black", size=15),
# axis.text.x = element_text(colour="black",size=rel(1.6)),
axis.text.y = element_text(colour="black",size=rel(1.2)),
axis.line = element_line(colour="black", size=rel(0.7)),
axis.ticks.x = element_line(colour="black", size=rel(0.7)),
axis.ticks.y = element_line(colour="black", size=rel(0.7)),
legend.position="none",
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
}
## I/O ##
io <- list()
# io$sample.metadata <- "/Users/ricard/data/gastrulation/sample_metadata.txt"
# io$in.metdir <- "/Users/ricard/data/gastrulation/met/cpg_level"
# io$outdir <- "/Users/ricard/gastrulation/met/QC/out"
io$sample.metadata <- "/Users/ricard/data/gastrulation_scBS/sample_metadata.txt"
io$in.metdir <- "/Users/ricard/data/gastrulation_scBS/met/cpg_level/E4.5_scBS"
# io$outdir <- "/Users/ricard/gastrulation/met/QC/out"
## Options ##
opts <- list()
# Define which cells to use
opts$cells <- fread(io$sample.metadata) %>% .[plate=="E5.5_scBS_Plate1" & !is.na(id_met),id_met]
# Filtering options
# opts$mapping_threshold <- 0.10
opts$met_coverage_threshold <- 1e5
metadata <- fread(io$sample.metadata)[id_met%in%opts$cells]
stats <- data.table(id_met=opts$cells, coverage=0)
for (cell in opts$cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$in.metdir,cell))) {
# print(sprintf("Loading %s...",cell))
tmp <- fread(sprintf("zcat < %s/%s.tsv.gz",io$in.metdir,cell), sep="\t", verbose=F, showProgress=F) %>% .[,c(1,2,5)] %>% setnames(c("chr","pos","rate"))
stats[id_met==cell,coverage:=nrow(tmp)]
} else {
print(sprintf("Sample %s not found",cell))
}
}
# fwrite(stats,file=io$statsfile, sep="\t", row.names=F, col.names=T)
# stats <- fread(io$statsfile) %>% .[sample%in%opts$cells] %>% merge(metadata,by="sample")
tmp <- stats[,c("id_met","coverage")] %>% setkey(coverage) %>% .[,id_met:=factor(id_met,levels=id_met)]
tmp$cellcolor <- c("black","red")[as.numeric(tmp$coverage < opts$met_coverage_threshold)+1]
p1 <- ggplot(tmp, aes(x=id_met, y=coverage)) +
geom_bar(stat="identity", position="dodge", fill="#F8766D", color="black") +
labs(title="", x="", y="Number of observed CpG sites") +
geom_hline(yintercept=opts$met_coverage_threshold, colour="black", linetype="dashed") +
barplot_theme() +
scale_y_continuous(expand=c(0,0), limits=c(0,6e+6)) +
# scale_y_continuous(expand=c(0,0), limits=c(0,7.5e+6)) +
theme(
# axis.text.x = element_text(angle=90, size=9, vjust=0.5, hjust=1.0, color=tmp$cellcolor)
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
print(p1)
print("Fail QC for methylation:")
failqc <- stats[coverage<opts$met_coverage_threshold,id_met]
print(failqc)
library(data.table)
library(purrr)
library(tidyr)
library(ggplot2)
library(cowplot)
barplot_theme <- function() {
p <- theme(
plot.title = element_text(size=20, hjust=0.5),
# axis.title.x = element_text(colour="black", size=25, vjust=1.5),
axis.title.x = element_blank(),
axis.title.y = element_text(colour="black", size=15),
# axis.text.x = element_text(colour="black",size=rel(1.6)),
axis.text.y = element_text(colour="black",size=rel(1.2)),
axis.line = element_line(colour="black", size=rel(0.7)),
axis.ticks.x = element_line(colour="black", size=rel(0.7)),
axis.ticks.y = element_line(colour="black", size=rel(0.7)),
legend.position="none",
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
}
## I/O ##
io <- list()
# io$sample.metadata <- "/Users/ricard/data/gastrulation/sample_metadata.txt"
# io$in.metdir <- "/Users/ricard/data/gastrulation/met/cpg_level"
# io$outdir <- "/Users/ricard/gastrulation/met/QC/out"
io$sample.metadata <- "/Users/ricard/data/gastrulation_scBS/sample_metadata.txt"
io$in.metdir <- "/Users/ricard/data/gastrulation_scBS/met/cpg_level/E4.5_scBS"
# io$outdir <- "/Users/ricard/gastrulation/met/QC/out"
## Options ##
opts <- list()
# Define which cells to use
opts$cells <- fread(io$sample.metadata) %>% .[plate=="E5.5_scBS_Plate1" & !is.na(id_met),id_met]
# Filtering options
# opts$mapping_threshold <- 0.10
opts$met_coverage_threshold <- 1e5
metadata <- fread(io$sample.metadata)[id_met%in%opts$cells]
stats <- data.table(id_met=opts$cells, coverage=0)
for (cell in opts$cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$in.metdir,cell))) {
# print(sprintf("Loading %s...",cell))
tmp <- fread(sprintf("zcat < %s/%s.tsv.gz",io$in.metdir,cell), sep="\t", verbose=F, showProgress=F) %>% .[,c(1,2,5)] %>% setnames(c("chr","pos","rate"))
stats[id_met==cell,coverage:=nrow(tmp)]
} else {
print(sprintf("Sample %s not found",cell))
}
}
# fwrite(stats,file=io$statsfile, sep="\t", row.names=F, col.names=T)
# stats <- fread(io$statsfile) %>% .[sample%in%opts$cells] %>% merge(metadata,by="sample")
tmp <- stats[,c("id_met","coverage")] %>% setkey(coverage) %>% .[,id_met:=factor(id_met,levels=id_met)]
tmp$cellcolor <- c("black","red")[as.numeric(tmp$coverage < opts$met_coverage_threshold)+1]
p1 <- ggplot(tmp, aes(x=id_met, y=coverage)) +
geom_bar(stat="identity", position="dodge", fill="#F8766D", color="black") +
labs(title="", x="", y="Number of observed CpG sites") +
geom_hline(yintercept=opts$met_coverage_threshold, colour="black", linetype="dashed") +
barplot_theme() +
scale_y_continuous(expand=c(0,0), limits=c(0,6e+6)) +
# scale_y_continuous(expand=c(0,0), limits=c(0,7.5e+6)) +
theme(
# axis.text.x = element_text(angle=90, size=9, vjust=0.5, hjust=1.0, color=tmp$cellcolor)
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
print(p1)
print("Fail QC for methylation:")
failqc <- stats[coverage<opts$met_coverage_threshold,id_met]
print(failqc)
## I/O ##
io <- list()
# io$sample.metadata <- "/Users/ricard/data/gastrulation/sample_metadata.txt"
# io$in.metdir <- "/Users/ricard/data/gastrulation/met/cpg_level"
# io$outdir <- "/Users/ricard/gastrulation/met/QC/out"
io$sample.metadata <- "/Users/ricard/data/gastrulation_scBS/sample_metadata.txt"
io$in.metdir <- "/Users/ricard/data/gastrulation_scBS/met/cpg_level/E5.5_scBS"
# io$outdir <- "/Users/ricard/gastrulation/met/QC/out"
## Options ##
opts <- list()
# Define which cells to use
opts$cells <- fread(io$sample.metadata) %>% .[plate=="E5.5_scBS_Plate1" & !is.na(id_met),id_met]
# Filtering options
# opts$mapping_threshold <- 0.10
opts$met_coverage_threshold <- 1e5
metadata <- fread(io$sample.metadata)[id_met%in%opts$cells]
stats <- data.table(id_met=opts$cells, coverage=0)
for (cell in opts$cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$in.metdir,cell))) {
# print(sprintf("Loading %s...",cell))
tmp <- fread(sprintf("zcat < %s/%s.tsv.gz",io$in.metdir,cell), sep="\t", verbose=F, showProgress=F) %>% .[,c(1,2,5)] %>% setnames(c("chr","pos","rate"))
stats[id_met==cell,coverage:=nrow(tmp)]
} else {
print(sprintf("Sample %s not found",cell))
}
}
tmp <- stats[,c("id_met","coverage")] %>% setkey(coverage) %>% .[,id_met:=factor(id_met,levels=id_met)]
tmp$cellcolor <- c("black","red")[as.numeric(tmp$coverage < opts$met_coverage_threshold)+1]
p1 <- ggplot(tmp, aes(x=id_met, y=coverage)) +
geom_bar(stat="identity", position="dodge", fill="#F8766D", color="black") +
labs(title="", x="", y="Number of observed CpG sites") +
geom_hline(yintercept=opts$met_coverage_threshold, colour="black", linetype="dashed") +
barplot_theme() +
scale_y_continuous(expand=c(0,0), limits=c(0,6e+6)) +
# scale_y_continuous(expand=c(0,0), limits=c(0,7.5e+6)) +
theme(
# axis.text.x = element_text(angle=90, size=9, vjust=0.5, hjust=1.0, color=tmp$cellcolor)
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
print(p1)
print("Fail QC for methylation:")
failqc <- stats[coverage<opts$met_coverage_threshold,id_met]
print(failqc)
library(data.table)
library(purrr)
library(ggplot2)
library(RColorBrewer)
theme_pub <- function() {
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,10,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
}
## Define I/O
io <- list()
io$in.metadata <- "/Users/ricard/data/gastrulation_scBS/sample_metadata.txt"
io$in.data <- "/Users/ricard/data/gastrulation_scBS/met/cpg_level"
# io$in.data <- "/Users/ricard/data/gastrulation/met/cpg_level/test/NMT_processed"
io$annos_dir  <- "/Users/ricard/data/gastrulation/features/filt"
# io$stats <- "/Users/ricard/gastrulation/met/stats/samples/out/sample_stats.txt"
## Define options
opts <- list()
# Define which stage and lineages to look at
opts$stage <- c("E4.5","E5.5")
# Define genomic contexts (use 'all' for no genomic context filtering)
# opts$general_annos <- c("prom_2000_2000","genebody","exons","introns","CGI","IAP")
# ESC ChIP-seq
# opts$esc_annos <- c("ESC_ActiveEnhancers","ESC_SuperEnhancers","ESC_PrimedEnhancers")
# E3.5 ChIP-seq
# opts$e35_annos <- c("E3.5_Promoter_H3K27ac","E3.5_Distal_H3K27ac","E3.5_H3K4me3")
# E6.5 ChIP-seq
# opts$e65_annos <- c("E6.5_Promoter_H3K27ac","E6.5_Distal_H3K27ac","E6.5_H3K4me3")
# Concatenate all
# opts$annos <- c(opts$general_annos,opts$esc_annos,opts$e35_annos)
# opts$annos <- c(opts$general_annos)
# Define which cells to use
opts$cells <- fread(io$in.metadata) %>%
.[pass_metQC==T & stage%in%opts$stage,id_met]
opts$fells
opts$cells
metadata <- fread(io$in.metadata) %>% .[id_met%in%opts$cells]
if (!is.null(opts$annos)) {
anno_dt <- lapply(opts$annos, function(anno) fread(sprintf("%s/%s.bed", io$annos_dir, anno),
colClasses = c("character", "integer", "integer", "character", "character", "character"))[, c(1, 2, 3, 4, 5, 6)]) %>%
rbindlist %>% setnames(c("chr", "start", "end", "strand", "id", "anno")) %>% .[,c("anno", "chr") := list(as.factor(anno), as.factor(chr))]
}
stats <- fread(io$stats)
io$stats <- "/Users/ricard/gastrulation_scBS/sample_stats.txt"
stats <- data.table(expand.grid(opts$cells,c(opts$annos,"all"))) %>% setnames(c("sample","anno")) %>%
.[,c("coverage","mean"):=0]
for (cell in opts$cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$in.data,cell))) {
# print(sprintf("Loading %s methylation...",cell))
# Load sample methylation data
data <- fread(sprintf("zcat < %s/%s.tsv.gz",io$in.data,cell), sep="\t", verbose=F, showProgress=F) %>%
.[,c("chr","pos","rate")]
# Compute genome-wide statistics
stats[sample==cell & anno=="all", c("coverage","mean"):=list(nrow(data),mean(data$rate)*100)]
# Calculate statistics per genomic context
data[,c("start","end") := list(pos,pos)] %>% .[,chr:=as.factor(chr)] %>% setkey(chr,start,end)
if (!is.null(opts$annos[1])) {
for (k in opts$annos) {
data_k <- foverlaps(data, anno_dt[anno==k]%>%setkey(chr,start,end), nomatch=0) %>%
.[,c("start","end","strand","i.start","i.end"):=NULL]
}
}
} else {
print(sprintf("Sample %s not found for methylation",cell))
}
}
fwrite(stats, file=io$stats, sep="\t", row.names=F, col.names=T)
file.exists(sprintf("%s/%s.tsv.gz",io$in.data,cell))
sprintf("%s/%s.tsv.gz",io$in.data,cell)
stats <- data.table(expand.grid(opts$cells,c(opts$annos,"all"))) %>% setnames(c("sample","anno")) %>%
.[,c("coverage","mean"):=0]
for (cell in opts$cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$in.data,cell))) {
# print(sprintf("Loading %s methylation...",cell))
# Load sample methylation data
data <- fread(sprintf("zcat < %s/%s.tsv.gz",io$in.data,cell), sep="\t", verbose=F, showProgress=F) %>%
.[,c("chr","pos","rate")]
# Compute genome-wide statistics
stats[sample==cell & anno=="all", c("coverage","mean"):=list(nrow(data),mean(data$rate)*100)]
# Calculate statistics per genomic context
data[,c("start","end") := list(pos,pos)] %>% .[,chr:=as.factor(chr)] %>% setkey(chr,start,end)
if (!is.null(opts$annos[1])) {
for (k in opts$annos) {
data_k <- foverlaps(data, anno_dt[anno==k]%>%setkey(chr,start,end), nomatch=0) %>%
.[,c("start","end","strand","i.start","i.end"):=NULL]
}
}
} else {
print(sprintf("Sample %s not found for methylation",cell))
}
}
fwrite(stats, file=io$stats, sep="\t", row.names=F, col.names=T)
io$stats <- "/Users/ricard/data/gastrulation_scBS/sample_stats.txt"
fwrite(stats, file=io$stats, sep="\t", row.names=F, col.names=T)
stats_filt <- stats[anno=="all"]
p <- ggplot(stats_filt, aes(x=stage, y=mean)) +
geom_boxplot(alpha=1.0, fill="#F8766D", outlier.shape = NA) +
geom_jitter(alpha=0.5, color="#F8766D") +
coord_cartesian(ylim=c(0,100)) +
ylab("Global methylation rate") +
theme_pub() +
theme(
legend.position = "none",
axis.text.x = element_text(colour="black",size=rel(1.5), angle=90, hjust=1, vjust=0.5, margin=margin(5,0,0,0))
)
print(p)
stats <- fread(io$stats)
stats <- stats %>%
merge(metadata[,c("id_met","stage","plate","embryo")] %>% setnames("id_met","sample"))
stats_filt <- stats[anno=="all"]
p <- ggplot(stats_filt, aes(x=stage, y=mean)) +
geom_boxplot(alpha=1.0, fill="#F8766D", outlier.shape = NA) +
geom_jitter(alpha=0.5, color="#F8766D") +
coord_cartesian(ylim=c(0,100)) +
ylab("Global methylation rate") +
theme_pub() +
theme(
legend.position = "none",
axis.text.x = element_text(colour="black",size=rel(1.5), angle=90, hjust=1, vjust=0.5, margin=margin(5,0,0,0))
)
print(p)
# pdf("/Users/ricard/gastrulation/met/stats/samples/out/met_means_stage.pdf", width=6, height=4, useDingbats = F)
# print(p)
# dev.off()
p <- ggplot(stats, aes(x=stage, y=log(coverage))) +
geom_boxplot(alpha=1.0, fill="#F8766D", outlier.shape = NA) +
geom_jitter(alpha=0.25, color="#F8766D", size=1) +
ylab("Log Coverage") +
theme_pub() +
theme(
axis.text.x = element_text(colour="black",size=rel(1.5), angle=90, hjust=1, vjust=0.5, margin=margin(5,0,0,0))
)
print(p)
# pdf("/Users/ricard/gastrulation/met/stats/samples/out/met_coverage.pdf", width=6, height=4, useDingbats = F)
# print(p)
# dev.off()
p <- ggplot(stats, aes(x=embryo, y=log(coverage))) +
geom_boxplot(alpha=1.0, fill="#F8766D", outlier.shape = NA) +
geom_jitter(alpha=0.25, color="#F8766D", size=1) +
ylab("Log Coverage") +
theme_pub() +
theme(
axis.text.x = element_text(colour="black",size=rel(1.5), angle=90, hjust=1, vjust=0.5, margin=margin(5,0,0,0))
)
print(p)
stats_filt <- stats[anno=="all"]
p <- ggplot(stats_filt, aes(x=coverage, y=mean)) +
geom_boxplot(alpha=1.0, fill="#F8766D", outlier.shape = NA) +
geom_jitter(alpha=0.5, color="#F8766D") +
coord_cartesian(ylim=c(0,100)) +
ylab("Global methylation rate") +
theme_pub() +
theme(
legend.position = "none",
axis.text.x = element_text(colour="black",size=rel(1.5), angle=90, hjust=1, vjust=0.5, margin=margin(5,0,0,0))
)
print(p)
# pdf("/Users/ricard/gastrulation/met/stats/samples/out/met_means_stage.pdf", width=6, height=4, useDingbats = F)
# print(p)
# dev.off()
stats_filt <- stats[anno=="all"]
p <- ggplot(stats_filt, aes(x=embryo, y=mean)) +
geom_boxplot(alpha=1.0, fill="#F8766D", outlier.shape = NA) +
geom_jitter(alpha=0.5, color="#F8766D") +
coord_cartesian(ylim=c(0,100)) +
ylab("Global methylation rate") +
theme_pub() +
theme(
legend.position = "none",
axis.text.x = element_text(colour="black",size=rel(1.5), angle=90, hjust=1, vjust=0.5, margin=margin(5,0,0,0))
)
print(p)
# pdf("/Users/ricard/gastrulation/met/stats/samples/out/met_means_stage.pdf", width=6, height=4, useDingbats = F)
# print(p)
# dev.off()
metadata <- fread(io$in.metadata) %>% .[id_met%in%opts$cells]
stats <- fread(io$stats)
stats <- stats %>%
merge(metadata[,c("id_met","stage","plate","embryo")] %>% setnames("id_met","sample"))
stats_filt <- stats[anno=="all"]
p <- ggplot(stats_filt, aes(x=embryo, y=mean)) +
geom_boxplot(alpha=1.0, fill="#F8766D", outlier.shape = NA) +
geom_jitter(alpha=0.5, color="#F8766D") +
coord_cartesian(ylim=c(0,100)) +
ylab("Global methylation rate") +
theme_pub() +
theme(
legend.position = "none",
axis.text.x = element_text(colour="black",size=rel(1.5), angle=90, hjust=1, vjust=0.5, margin=margin(5,0,0,0))
)
print(p)
# pdf("/Users/ricard/gastrulation/met/stats/samples/out/met_means_stage.pdf", width=6, height=4, useDingbats = F)
# print(p)
# dev.off()
stats <- fread(io$stats)
stats <- stats %>%
merge(metadata[,c("id_met","stage","plate","embryo")] %>% setnames("id_met","sample"))
stats_filt <- stats[anno=="all"]
p <- ggplot(stats_filt, aes(x=embryo, y=mean)) +
geom_boxplot(alpha=1.0, fill="#F8766D", outlier.shape = NA) +
geom_jitter(alpha=0.5, color="#F8766D") +
coord_cartesian(ylim=c(0,100)) +
ylab("Global methylation rate") +
theme_pub() +
theme(
legend.position = "none",
axis.text.x = element_text(colour="black",size=rel(1.5), angle=90, hjust=1, vjust=0.5, margin=margin(5,0,0,0))
)
print(p)
# pdf("/Users/ricard/gastrulation/met/stats/samples/out/met_means_stage.pdf", width=6, height=4, useDingbats = F)
# print(p)
# dev.off()
stats_filt <- stats[anno=="all"]
p <- ggplot(stats_filt, aes(x=stage, y=mean)) +
geom_boxplot(alpha=1.0, fill="#F8766D", outlier.shape = NA) +
geom_jitter(alpha=0.5, color="#F8766D") +
coord_cartesian(ylim=c(0,100)) +
ylab("Global methylation rate") +
theme_pub() +
theme(
legend.position = "none",
axis.text.x = element_text(colour="black",size=rel(1.5), angle=90, hjust=1, vjust=0.5, margin=margin(5,0,0,0))
)
print(p)
# pdf("/Users/ricard/gastrulation/met/stats/samples/out/met_means_stage.pdf", width=6, height=4, useDingbats = F)
# print(p)
# dev.off()
metadata <- fread(io$in.metadata) %>% .[id_met%in%opts$cells]
stats <- fread(io$stats)
stats <- stats %>%
merge(metadata[,c("id_met","stage","plate","embryo")] %>% setnames("id_met","sample"))
stats_filt <- stats[anno=="all"]
p <- ggplot(stats_filt, aes(x=stage, y=mean)) +
geom_boxplot(alpha=1.0, fill="#F8766D", outlier.shape = NA) +
geom_jitter(alpha=0.5, color="#F8766D") +
coord_cartesian(ylim=c(0,100)) +
ylab("Global methylation rate") +
theme_pub() +
theme(
legend.position = "none",
axis.text.x = element_text(colour="black",size=rel(1.5), angle=90, hjust=1, vjust=0.5, margin=margin(5,0,0,0))
)
print(p)
# pdf("/Users/ricard/gastrulation/met/stats/samples/out/met_means_stage.pdf", width=6, height=4, useDingbats = F)
# print(p)
# dev.off()
s
