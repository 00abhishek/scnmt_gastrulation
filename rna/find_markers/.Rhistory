# ## END TESTING ##
# Define which cells to use
opts$cells <- fread(io$sample.metadata) %>%
.[,stage_lineage:=paste(stage,lineage10x_2,sep="_")] %>%
.[pass_accQC==T & stage_lineage%in%c(opts$groupA,opts$groupB),id_acc]
###############
## Load data ##
###############
# Load sample metadata
sample_metadata <- fread(io$sample.metadata) %>%
.[id_acc%in%opts$cells] %>%
.[,stage_lineage:=paste(stage,lineage10x_2,sep="_")]
# Load gene metadata
# gene_metadata <- fread(io$gene.metadata) %>%
#   .[,chr:=as.factor(sub("chr","",chr))] %>%
#   setnames(c("ens_id","symbol"),c("id","gene"))
# Load genomic context metadata
# feature_metadata <- lapply(opts$annos, function(n) fread(sprintf("%s/%s.bed",io$annos_dir,n), showProgress=F)) %>% rbindlist
# colnames(feature_metadata) <- c("chr","start","end","strand","id","anno")
# Load accessibility data
data <- lapply(opts$annos, function(n) fread(cmd=sprintf("zcat < %s/%s.tsv.gz",io$data.dir,n), showProgress=F, header=F, sep="\t")) %>% rbindlist %>%
setnames(c("id_acc","id","anno","Nacc","N","rate"))
##############################
## Parse accessibility data ##
##############################
# Merge accessibility data and sample metadata
data <- data %>% merge(sample_metadata[,c("id_acc","stage","stage_lineage")], by="id_acc") %>% setkey(anno)
# Define the two exclusive groups
data[,group:=as.factor( c("A","B")[as.numeric(stage_lineage%in%opts$groupB)+1] )]
sample_metadata[,group:=as.factor( c("A","B")[as.numeric(stage_lineage%in%opts$groupB)+1] )]
# Convert beta value to M value
# data[,m:=log2(((rate/100)+0.01)/(1-(rate/100)+0.01))]
###############################
## Filter accessibility data ##
###############################
# Remove sex chromosomes because it might have inherently large variation due to gender
# data <- merge(data,feature_metadata[,c("id","chr","anno")], by=c("id","anno")) %>% .[!chr %in% c("Y")] %>% .[,chr:=NULL]
# Filter features by coverage
data <- data[N>=opts$min.GpCs]
# Filter features by minimum number of cells per group
remove_n_sites <- data %>% split(.$anno) %>% map(~ .[,.(N=min(.N)), by=c("id","group")] %>% .[N<opts$min.cells,id])
data <- data %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[!id %in% remove_n_sites[[y]]]) %>% rbindlist
# Filter by variance
if (opts$fraction.sites < 1) {
keep_hv_sites <- data %>% split(.$anno) %>% map(~ .[,.(var = var(rate)), by="id"] %>% setorder(-var)  %>% head(n = nrow(.) * opts$fraction.sites) %>% .$id)
data <- data %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[id %in% keep_hv_sites[[y]]]) %>% rbindlist
}
###################################
## Regress out global statistics ##
###################################
# if (opts$regress.mean) {
#
#   # Load global statistics
#   stats <- fread(io$global.stats) %>% .[anno=="all"] %>%
#     .[,c("coverage","nreads","anno"):=NULL] %>%
#     .[,covariate:=log2(((mean/100)+0.01)/(1-(mean/100)+0.01))]
#   stopifnot(all(data$id_acc %in% stats$id_acc))
#   unique(data$id_acc)[!unique(data$id_acc) %in% stats$id_acc]
#
#   # Merge data with global statistics
#   data <- merge(data, stats[,c("id_acc","covariate")], by="id_acc")
#
#   # Fit the linear model and regress out the covariate effect
#   data[, c("m"):=.(lm(formula=m~covariate)[["residuals"]]), by=c("id","anno")]
#
# }
###############################################
## Associate the genomic features with genes ##
###############################################
# if (opts$OverlapWithGenes==TRUE) {
#
#   # Prepare feature metadata and gene metadata for the overlap
#   gene_metadata_filt <- gene_metadata[, c("chr","start","end","gene","id")] %>%
#     .[,c("start", "end") := list(start-opts$gene_window, end+opts$gene_window)] %>%
#     setkey(chr,start,end)
#
#   feature_metadata_filt <- feature_metadata %>% split(.$anno) %>%
#     map2(.,names(.), function(x,y) x[id %in% data[anno==y,id]] ) %>%
#     rbindlist
#
#   # Do the overlap
#   data_list <- list()
#   for (i in unique(data$anno)){
#     data_tmp <- data[anno==i, ]
#
#     # Non gene-associated feature
#     if (all(grepl("ENSMUSG", unique(data_tmp$id)) == FALSE)) {
#       ov <- foverlaps(
#         feature_metadata_filt[anno==i, c("chr","start","end","id")] %>% setkey(chr,start,end),
#         gene_metadata_filt[, c("chr","start","end","gene")],
#         nomatch = NA) %>% .[,c("gene", "id")]
#
#       # ov1 <- ov[is.na(gene)]
#       # ov2 <- ov[!is.na(gene)] %>% .[,.(gene=paste(gene,collapse="_")), by="id"]
#       # ov <- rbind(ov1,ov2)
#
#       # Merge with accessibility data
#       data_list[[i]] <- merge(ov, data_tmp, by = "id", allow.cartesian=T) %>%
#         .[,c("id","gene","anno","id_acc","rate","Nacc","N","stage_lineage","group")]
#     }
#
#     # Gene-associated feature
#     else if (all(grepl("ENSMUSG", unique(data_tmp$id)) == TRUE)) {
#       data_list[[i]] <- merge(data_tmp, gene_metadata[, c("id", "gene")], by="id") %>%
#         .[,c("id","gene","anno","id_acc","rate","Nacc","N","stage_lineage","group")]
#     }
#   }
#   data <- rbindlist(data_list)
#
# } else {
#   data[,gene:="NA"]
# }
#########################################
## Differential accessibility analysis ##
#########################################
# Binomial assumption: test of equal proportions using Fisher exact test
if (opts$statistical.test == "binomial") {
diff <- data[, .(
A_acc=sum(.SD[group=="A",Nacc]), A_unacc=sum(.SD[group=="A",N-Nacc]),
B_acc=sum(.SD[group=="B",Nacc]), B_unacc=sum(.SD[group=="B",N-Nacc])), by = c("id","anno")] %>%
.[,p.value := fisher.test(x = matrix( c(A_acc, A_unacc, B_acc, B_unacc), nrow=2, ncol=2))[["p.value"]]] %>%
.[,c("rateA","rateB"):=list(100*(A_acc/(A_acc+A_unacc)), 100*(B_acc/(B_acc+B_unacc)))]
# T-test under normality assumption
} else if (opts$statistical.test == "t.test") {
diff <- data[, .(
N_A = .SD[group=="A",.N], N_B = .SD[group=="B",.N],
rateA = mean(.SD[group=="A",rate]), rateB = mean(.SD[group=="B",rate]),
p.value = t.test(x=.SD[group=="B",m], y=.SD[group=="A",m], var.equal=FALSE)[["p.value"]]), by = c("id","anno")]
}
# Multiple testing correction and define significant hits
diff %>%
.[,diff:=rateB-rateA] %>%
.[,c("padj_fdr") := list(p.adjust(p.value, method="fdr")), by="anno"] %>%
.[,c("log_padj_fdr") := list(-log10(padj_fdr))] %>%
.[,sig:=(padj_fdr<=opts$threshold_fdr & abs(diff)>opts$min.diff)] %>%
.[,c("rateA","rateB","diff"):=list(round(rateA,2),round(rateB,2),round(diff,2))] %>%
setorderv("padj_fdr")
##################
## Save results ##
##################
View(diff)
#######################################################################
## Script to compute differential accessibility at the feature level ##
#######################################################################
library(data.table)
library(purrr)
library(ggplot2)
library(argparse)
## Initialize argument parser ##
p <- ArgumentParser(description='')
p$add_argument('-a',  '--anno',           type="character",  nargs='+',  help='genomic context (i.e. genebody, promoters, etc.')
p$add_argument('-s1', '--stage_lineage1', type="character",  nargs='+',  help='stage_lineage 1 (E4.5_EPI, E5.5_VE,...)')
p$add_argument('-s2', '--stage_lineage2', type="character",  nargs='+',  help='stage_lineage 2 (E4.5_EPI, E5.5_VE,...)')
p$add_argument('-cells', '--min.cells',   type="integer",                help='Minimum number of cells per group')
p$add_argument('-o',  '--outfile',        type="character",              help='Output file')
args <- p$parse_args(commandArgs(TRUE))
## Define I/O ##
io <- list()
if (grepl("ricard",Sys.info()['nodename'])) {
io$basedir <- "/Users/ricard/data/gastrulation"
io$gene.metadata <- "/Users/ricard/data/ensembl/mouse/v87/BioMart/mRNA/Mmusculus_genes_BioMart.87.txt"
io$global.stats <- "/Users/ricard/data/gastrulation/acc/stats/sample_stats.txt"
source("/Users/ricard/gastrulation/met/differential/utils.R")
} else {
io$basedir <- "/hps/nobackup/stegle/users/ricard/gastrulation"
io$gene.metadata <- "/hps/nobackup/stegle/users/ricard/ensembl/mouse/v87/BioMart/mRNA/Mmusculus_genes_BioMart.87.txt"
io$global.stats <- "/hps/nobackup/stegle/users/ricard/gastrulation/acc/stats/sample_stats.txt"
source("/homes/ricard/gastrulation/met/differential/utils.R")
}
io$sample.metadata <- paste0(io$basedir,"/sample_metadata.txt")
io$data.dir <- paste0(io$basedir,"/acc/parsed")
io$annos_dir  <- paste0(io$basedir, "/features/genomic_contexts")
io$outfile <- args$outfile
# dir.create(dirname(io$outfile), recursive = TRUE)
## Define options ##
opts <- list()
# Define genomic contexts
opts$annos <- args$anno
# Regress out global mean accessibility rate
opts$regress.mean <- FALSE
# Statistical test: binomial (counts) or t.test (beta-values)
opts$statistical.test <- "binomial"
if (opts$regress.mean) {
warning("Binomial test does not work when regressing out the global accessibility, switching to t.test")
opts$statistical.test <- "t.test"
}
# Define stage and lineage
opts$groupA <- args$stage_lineage1
opts$groupB <- args$stage_lineage2
# Overlap genomic features with nearby genes?
# opts$OverlapWithGenes <- TRUE
# opts$gene_window <- 5e4       # window length for the overlap
# Filter by variability
opts$fraction.sites <- 1.0    # Fraction of sites to keep based on variance
# Filter by coverage
opts$min.GpCs <- 5                # Minimum number of GpC per feature in each cell
opts$min.cells <- args$min.cells  # Minimum number of cells per feature in each group
# Minimum differential accessibility (%) for statistical significance
opts$min.diff <- 10
# Multiple testing correction
opts$threshold_fdr <- 0.01
# ## START TESTING ##
opts$annos <- "H3K27ac_distal_E7.5_Ect_intersect12"
opts$groupA <- "E7.5_Mature_mesoderm"; opts$groupB <- c("E7.5_Ectoderm","E7.5_Caudal_epiblast","E7.5_Epiblast","E7.5_Embryonic_endoderm","E7.5_Notochord","E7.5_Visceral_endoderm")
opts$min.cells <- 5
# ## END TESTING ##
# Define which cells to use
opts$cells <- fread(io$sample.metadata) %>%
.[,stage_lineage:=paste(stage,lineage10x_2,sep="_")] %>%
.[pass_accQC==T & stage_lineage%in%c(opts$groupA,opts$groupB),id_acc]
###############
## Load data ##
###############
# Load sample metadata
sample_metadata <- fread(io$sample.metadata) %>%
.[id_acc%in%opts$cells] %>%
.[,stage_lineage:=paste(stage,lineage10x_2,sep="_")]
# Load gene metadata
# gene_metadata <- fread(io$gene.metadata) %>%
#   .[,chr:=as.factor(sub("chr","",chr))] %>%
#   setnames(c("ens_id","symbol"),c("id","gene"))
# Load genomic context metadata
# feature_metadata <- lapply(opts$annos, function(n) fread(sprintf("%s/%s.bed",io$annos_dir,n), showProgress=F)) %>% rbindlist
# colnames(feature_metadata) <- c("chr","start","end","strand","id","anno")
# Load accessibility data
data <- lapply(opts$annos, function(n) fread(cmd=sprintf("zcat < %s/%s.tsv.gz",io$data.dir,n), showProgress=F, header=F, sep="\t")) %>% rbindlist %>%
setnames(c("id_acc","id","anno","Nacc","N","rate"))
##############################
## Parse accessibility data ##
##############################
# Merge accessibility data and sample metadata
data <- data %>% merge(sample_metadata[,c("id_acc","stage","stage_lineage")], by="id_acc") %>% setkey(anno)
# Define the two exclusive groups
data[,group:=as.factor( c("A","B")[as.numeric(stage_lineage%in%opts$groupB)+1] )]
sample_metadata[,group:=as.factor( c("A","B")[as.numeric(stage_lineage%in%opts$groupB)+1] )]
# Convert beta value to M value
# data[,m:=log2(((rate/100)+0.01)/(1-(rate/100)+0.01))]
###############################
## Filter accessibility data ##
###############################
# Remove sex chromosomes because it might have inherently large variation due to gender
# data <- merge(data,feature_metadata[,c("id","chr","anno")], by=c("id","anno")) %>% .[!chr %in% c("Y")] %>% .[,chr:=NULL]
# Filter features by coverage
data <- data[N>=opts$min.GpCs]
# Filter features by minimum number of cells per group
remove_n_sites <- data %>% split(.$anno) %>% map(~ .[,.(N=min(.N)), by=c("id","group")] %>% .[N<opts$min.cells,id])
data <- data %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[!id %in% remove_n_sites[[y]]]) %>% rbindlist
# Filter by variance
if (opts$fraction.sites < 1) {
keep_hv_sites <- data %>% split(.$anno) %>% map(~ .[,.(var = var(rate)), by="id"] %>% setorder(-var)  %>% head(n = nrow(.) * opts$fraction.sites) %>% .$id)
data <- data %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[id %in% keep_hv_sites[[y]]]) %>% rbindlist
}
###################################
## Regress out global statistics ##
###################################
# if (opts$regress.mean) {
#
#   # Load global statistics
#   stats <- fread(io$global.stats) %>% .[anno=="all"] %>%
#     .[,c("coverage","nreads","anno"):=NULL] %>%
#     .[,covariate:=log2(((mean/100)+0.01)/(1-(mean/100)+0.01))]
#   stopifnot(all(data$id_acc %in% stats$id_acc))
#   unique(data$id_acc)[!unique(data$id_acc) %in% stats$id_acc]
#
#   # Merge data with global statistics
#   data <- merge(data, stats[,c("id_acc","covariate")], by="id_acc")
#
#   # Fit the linear model and regress out the covariate effect
#   data[, c("m"):=.(lm(formula=m~covariate)[["residuals"]]), by=c("id","anno")]
#
# }
###############################################
## Associate the genomic features with genes ##
###############################################
# if (opts$OverlapWithGenes==TRUE) {
#
#   # Prepare feature metadata and gene metadata for the overlap
#   gene_metadata_filt <- gene_metadata[, c("chr","start","end","gene","id")] %>%
#     .[,c("start", "end") := list(start-opts$gene_window, end+opts$gene_window)] %>%
#     setkey(chr,start,end)
#
#   feature_metadata_filt <- feature_metadata %>% split(.$anno) %>%
#     map2(.,names(.), function(x,y) x[id %in% data[anno==y,id]] ) %>%
#     rbindlist
#
#   # Do the overlap
#   data_list <- list()
#   for (i in unique(data$anno)){
#     data_tmp <- data[anno==i, ]
#
#     # Non gene-associated feature
#     if (all(grepl("ENSMUSG", unique(data_tmp$id)) == FALSE)) {
#       ov <- foverlaps(
#         feature_metadata_filt[anno==i, c("chr","start","end","id")] %>% setkey(chr,start,end),
#         gene_metadata_filt[, c("chr","start","end","gene")],
#         nomatch = NA) %>% .[,c("gene", "id")]
#
#       # ov1 <- ov[is.na(gene)]
#       # ov2 <- ov[!is.na(gene)] %>% .[,.(gene=paste(gene,collapse="_")), by="id"]
#       # ov <- rbind(ov1,ov2)
#
#       # Merge with accessibility data
#       data_list[[i]] <- merge(ov, data_tmp, by = "id", allow.cartesian=T) %>%
#         .[,c("id","gene","anno","id_acc","rate","Nacc","N","stage_lineage","group")]
#     }
#
#     # Gene-associated feature
#     else if (all(grepl("ENSMUSG", unique(data_tmp$id)) == TRUE)) {
#       data_list[[i]] <- merge(data_tmp, gene_metadata[, c("id", "gene")], by="id") %>%
#         .[,c("id","gene","anno","id_acc","rate","Nacc","N","stage_lineage","group")]
#     }
#   }
#   data <- rbindlist(data_list)
#
# } else {
#   data[,gene:="NA"]
# }
#########################################
## Differential accessibility analysis ##
#########################################
# Binomial assumption: test of equal proportions using Fisher exact test
if (opts$statistical.test == "binomial") {
diff <- data[, .(
A_acc=sum(.SD[group=="A",Nacc]), A_unacc=sum(.SD[group=="A",N-Nacc]),
B_acc=sum(.SD[group=="B",Nacc]), B_unacc=sum(.SD[group=="B",N-Nacc])), by = c("id","anno")] %>%
.[,p.value := fisher.test(x = matrix( c(A_acc, A_unacc, B_acc, B_unacc), nrow=2, ncol=2))[["p.value"]]] %>%
.[,c("rateA","rateB"):=list(100*(A_acc/(A_acc+A_unacc)), 100*(B_acc/(B_acc+B_unacc)))]
# T-test under normality assumption
} else if (opts$statistical.test == "t.test") {
diff <- data[, .(
N_A = .SD[group=="A",.N], N_B = .SD[group=="B",.N],
rateA = mean(.SD[group=="A",rate]), rateB = mean(.SD[group=="B",rate]),
p.value = t.test(x=.SD[group=="B",m], y=.SD[group=="A",m], var.equal=FALSE)[["p.value"]]), by = c("id","anno")]
}
# Multiple testing correction and define significant hits
diff %>%
.[,diff:=rateB-rateA] %>%
.[,c("padj_fdr") := list(p.adjust(p.value, method="fdr")), by="anno"] %>%
.[,c("log_padj_fdr") := list(-log10(padj_fdr))] %>%
.[,sig:=(padj_fdr<=opts$threshold_fdr & abs(diff)>opts$min.diff)] %>%
.[,c("rateA","rateB","diff"):=list(round(rateA,2),round(rateB,2),round(diff,2))] %>%
setorderv("padj_fdr")
##################
## Save results ##
##################
View(diff)
diff <- data[, .(
A_acc=sum(.SD[group=="A",Nacc]), A_unacc=sum(.SD[group=="A",N-Nacc]),
B_acc=sum(.SD[group=="B",Nacc]), B_unacc=sum(.SD[group=="B",N-Nacc])), by = c("id","anno")] %>%
.[,p.value := fisher.test(x = matrix( c(A_acc, A_unacc, B_acc, B_unacc), nrow=2, ncol=2))[["p.value"]]] %>%
.[,c("rateA","rateB"):=list(100*(A_acc/(A_acc+A_unacc)), 100*(B_acc/(B_acc+B_unacc)))]
A_acc=sum(.SD[group=="A",Nacc]), A_unacc=sum(.SD[group=="A",N-Nacc]),
B_acc=sum(.SD[group=="B",Nacc]), B_unacc=sum(.SD[group=="B",N-Nacc])), by = c("id","anno")] %>%
.[,p.value := fisher.test(x = matrix( c(A_acc, A_unacc, B_acc, B_unacc), nrow=2, ncol=2))[["p.value"]], by="gene"] %>%
.[,c("rateA","rateB"):=list(100*(A_acc/(A_acc+A_unacc)), 100*(B_acc/(B_acc+B_unacc)))]
head(data)
diff <- data[, .(
A_acc=sum(.SD[group=="A",Nacc]), A_unacc=sum(.SD[group=="A",N-Nacc]),
B_acc=sum(.SD[group=="B",Nacc]), B_unacc=sum(.SD[group=="B",N-Nacc])), by = c("id","anno")]
head(diff)
diff %>% .[,p.value := fisher.test(x = matrix( c(A_acc, A_unacc, B_acc, B_unacc), nrow=2, ncol=2))[["p.value"]], by=c("id","anno")]
head(diff)
View(diff)
# Binomial assumption: test of equal proportions using Fisher exact test
if (opts$statistical.test == "binomial") {
diff <- data[, .(
A_acc=sum(.SD[group=="A",Nacc]), A_unacc=sum(.SD[group=="A",N-Nacc]),
B_acc=sum(.SD[group=="B",Nacc]), B_unacc=sum(.SD[group=="B",N-Nacc])), by = c("id","anno")] %>%
.[,p.value := fisher.test(x = matrix( c(A_acc, A_unacc, B_acc, B_unacc), nrow=2, ncol=2))[["p.value"]], by=c("id","anno")] %>%
.[,c("rateA","rateB"):=list(100*(A_acc/(A_acc+A_unacc)), 100*(B_acc/(B_acc+B_unacc)))]
# T-test under normality assumption
} else if (opts$statistical.test == "t.test") {
diff <- data[, .(
N_A = .SD[group=="A",.N], N_B = .SD[group=="B",.N],
rateA = mean(.SD[group=="A",rate]), rateB = mean(.SD[group=="B",rate]),
p.value = t.test(x=.SD[group=="B",m], y=.SD[group=="A",m], var.equal=FALSE)[["p.value"]]), by = c("id","anno")]
}
# Multiple testing correction and define significant hits
diff %>%
.[,diff:=rateB-rateA] %>%
.[,c("padj_fdr") := list(p.adjust(p.value, method="fdr")), by="anno"] %>%
.[,c("log_padj_fdr") := list(-log10(padj_fdr))] %>%
.[,sig:=(padj_fdr<=opts$threshold_fdr & abs(diff)>opts$min.diff)] %>%
.[,c("rateA","rateB","diff"):=list(round(rateA,2),round(rateB,2),round(diff,2))] %>%
setorderv("padj_fdr")
View(diff)
library(data.table)
library(purrr)
library(ggplot2)
library(RColorBrewer)
## I/O ##
io <- list()
io$input.dir <- "/Users/ricard/data/gastrulation/acc/differential/feature_level/test"
io$outdir <- "/Users/ricard/data/gastrulation/acc/differential/feature_level/pdf"
## Options ##
opts <- list()
opts$comparisons <- c(
"E7.5Ectoderm_vs_E7.5MesodermEndoderm",
"E7.5Ectoderm_vs_E7.5Mesoderm",
"E7.5Ectoderm_vs_E7.5Endoderm"
# "E7.5EctodermEpiblast_vs_E7.5MesodermEndoderm",
# "E7.5EctodermEpiblast_vs_E7.5Mesoderm",
# "E7.5EctodermEpiblast_vs_E7.5Endoderm"
)
# Select genomic contexts
opts$annos <- c(
"H3K27ac_distal_E7.5_Ect_intersect12",
"H3K27ac_distal_E7.5_End_intersect12",
"H3K27ac_distal_E7.5_Mes_intersect12"
# "prom_200_200"
)
opts$colors <- c(
"H3K27ac_distal_E7.5_Ect_intersect12" = "steelblue",
"H3K27ac_distal_E7.5_End_intersect12" = "#43CD80",
"H3K27ac_distal_E7.5_Mes_intersect12" = "violetred"
# "prom_200_200"
)
# Load precomputed differential results
diff.results <- lapply(opts$comparisons, function(i)
lapply(opts$annos, function(j)
fread(cmd=sprintf("zcat < %s/%s_%s.txt.gz",io$input.dir,i,j))
) %>% rbindlist %>% .[,comparison:=i]
) %>% rbindlist %>% .[complete.cases(.)]
head(diff.results)
gg_barplot <- function(tmp, title = "", ylim=NULL) {
if (is.null(ylim)) {
ylim <- c(min(tmp$value, na.rm=T), max(tmp$value, na.rm=T))
}
p <- ggplot(tmp, aes(x=anno, y=value, group=anno)) +
geom_bar(aes(fill=anno), color="black", stat="identity", position="dodge") +
scale_fill_manual(values=opts$colors) +
geom_hline(yintercept=0, color="black") +
scale_y_continuous(limits=c(ylim[1],ylim[2])) +
labs(title="", x="", y="Number of hits") +
theme(
plot.title = element_text(size=11, face='bold', hjust=0.5),
axis.text = element_text(size=rel(1.0), color='black'),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title = element_text(size=rel(1.0), color='black'),
axis.line = element_line(color="black"),
legend.position="none",
panel.border=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
return(p)
}
tmp <- diff.results %>%
.[,.(number_positive_hits=sum(sig==T & diff>0), number_negative_hits=sum(sig==T & diff<0)), by=c("anno","comparison")] %>%
.[,number_negative_hits:=-number_negative_hits] %>%
melt(id.vars=c("anno","comparison"))
ylim <- c(min(tmp$value), max(tmp$value))
for (i in unique(diff.results$comparison)) {
p <- gg_barplot(tmp[comparison==i], title=i, ylim=ylim)
# pdf(sprintf("%s/%s.pdf",io$outdir,i), width=6, height=4)
print(p)
# dev.off()
}
i
i
gg_barplot <- function(tmp, title = "", ylim=NULL) {
if (is.null(ylim))
ylim <- c(min(tmp$value, na.rm=T), max(tmp$value, na.rm=T))
p <- ggplot(tmp, aes(x=anno, y=value, group=anno)) +
geom_bar(aes(fill=anno), color="black", stat="identity", position="dodge") +
scale_fill_manual(values=opts$colors) +
geom_hline(yintercept=0, color="black") +
scale_y_continuous(limits=c(ylim[1],ylim[2])) +
labs(title=title, x="", y="Number of hits") +
theme(
plot.title = element_text(size=11, face='bold', hjust=0.5),
axis.text = element_text(size=rel(1.0), color='black'),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title = element_text(size=rel(1.0), color='black'),
axis.line = element_line(color="black"),
legend.position="none",
panel.border=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
return(p)
}
for (i in unique(diff.results$comparison)) {
p <- gg_barplot(tmp[comparison==i], title=i, ylim=ylim)
# pdf(sprintf("%s/%s.pdf",io$outdir,i), width=6, height=4)
print(p)
# dev.off()
}
head(diff.results)
foo <- diff.results[comparison=="E7.5Ectoderm_vs_E7.5Endoderm"]
bar <- diff.results[comparison=="E7.5Ectoderm_vs_E7.5Mesoderm"]
foo <- diff.results[comparison=="E7.5Ectoderm_vs_E7.5Endoderm"] %>% .[sig==T]
head(foo)
tmp <- diff.results %>%
.[,.(number_positive_hits=sum(sig==T & diff>0), number_negative_hits=sum(sig==T & diff<0)), by=c("anno","comparison")] %>%
.[,number_negative_hits:=-number_negative_hits] %>%
melt(id.vars=c("anno","comparison"))
ylim <- c(min(tmp$value), max(tmp$value))
for (i in unique(diff.results$comparison)) {
p <- gg_barplot(tmp[comparison==i], title=i, ylim=ylim)
# pdf(sprintf("%s/%s.pdf",io$outdir,i), width=6, height=4)
print(p)
# dev.off()
}
foo <- diff.results[comparison=="E7.5Ectoderm_vs_E7.5Endoderm" & anno=="H3K27ac_distal_E7.5_Ect_intersect12"]# %>% .[sig==T,id]
haed(foo)
View(foo)
source('~/MOFA/R/plotFactors.R', echo=TRUE)
