## Define I/O
io <- list()
io$in.metadata <- "/Users/ricard/data/gastrulation/sample_metadata.txt"
io$in.data <- "/Users/ricard/data/gastrulation/acc/cpg_level"
io$annos_dir  <- "/Users/ricard/data/gastrulation/features/filt"
io$stats <- "/Users/ricard/gastrulation/acc/stats/samples/out/sample_stats.txt"
## Define options
opts <- list()
# Define which stage and lineages to look at
opts$stage_lineage <- c("E6.5_EPI","E6.5_PS","E6.75_EPI","E6.75_PS","E7.5_Ectoderm","E7.5_Cardiac")
# opts$stage_lineage <- c("E7.5_Ectoderm","E7.5_Cardiac","E7.5_VE","E7.5_Mesoderm")
# opts$stage <- c("E4.5","E5.5","E6.5","E6.75","E7.5")
# opts$stage <- c("E6.75")
# Define genomic contexts (use 'all' for no genomic context filtering)
# opts$general_annos <- c("prom_2000_2000","genebody","exons","introns","CGI","IAP")
# ESC ChIP-seq
# opts$esc_annos <- c("ESC_ActiveEnhancers","ESC_SuperEnhancers","ESC_PrimedEnhancers")
# E3.5 ChIP-seq
# opts$e35_annos <- c("E3.5_Promoter_H3K27ac","E3.5_Distal_H3K27ac","E3.5_H3K4me3")
# E6.5 ChIP-seq
# opts$e65_annos <- c("E6.5_Promoter_H3K27ac","E6.5_Distal_H3K27ac","E6.5_H3K4me3")
# Concatenate all
# opts$annos <- c(opts$general_annos,opts$esc_annos,opts$e35_annos)
# opts$annos <- c(opts$general_annos)
# Define which cells to use
opts$cells <- fread(io$in.metadata) %>%
.[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
.[plate=="E7.5_Plate3"] %>%
.[pass_accQC==T,id_acc]
library(data.table)
library(purrr)
library(ggplot2)
theme_pub <- function() {
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
}
## Define I/O
io <- list()
io$in.metadata <- "/Users/ricard/data/gastrulation/sample_metadata.txt"
io$in.data <- "/Users/ricard/data/gastrulation/acc/cpg_level"
io$annos_dir  <- "/Users/ricard/data/gastrulation/features/filt"
io$stats <- "/Users/ricard/gastrulation/acc/stats/samples/out/sample_stats.txt"
## Define options
opts <- list()
# Define which stage and lineages to look at
opts$stage_lineage <- c("E6.5_EPI","E6.5_PS","E6.75_EPI","E6.75_PS","E7.5_Ectoderm","E7.5_Cardiac")
# opts$stage_lineage <- c("E7.5_Ectoderm","E7.5_Cardiac","E7.5_VE","E7.5_Mesoderm")
# opts$stage <- c("E4.5","E5.5","E6.5","E6.75","E7.5")
# opts$stage <- c("E6.75")
# Define genomic contexts (use 'all' for no genomic context filtering)
# opts$general_annos <- c("prom_2000_2000","genebody","exons","introns","CGI","IAP")
# ESC ChIP-seq
# opts$esc_annos <- c("ESC_ActiveEnhancers","ESC_SuperEnhancers","ESC_PrimedEnhancers")
# E3.5 ChIP-seq
# opts$e35_annos <- c("E3.5_Promoter_H3K27ac","E3.5_Distal_H3K27ac","E3.5_H3K4me3")
# E6.5 ChIP-seq
# opts$e65_annos <- c("E6.5_Promoter_H3K27ac","E6.5_Distal_H3K27ac","E6.5_H3K4me3")
# Concatenate all
# opts$annos <- c(opts$general_annos,opts$esc_annos,opts$e35_annos)
# opts$annos <- c(opts$general_annos)
# Define which cells to use
opts$cells <- fread(io$in.metadata) %>%
.[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
.[plate=="E7.5_Plate3"] %>%
.[pass_accQC==T,id_acc]
# .[pass_accQC==T & stage_lineage%in%opts$stage_lineage,id_acc]
# .[pass_accQC==T & stage%in%opts$stage,id_acc]
metadata <- fread(io$in.metadata) %>% .[id_acc%in%opts$cells] %>%
# .[,stage_lineage:=paste(stage,lineage,sep="_")]
.[,stage_lineage:=paste(stage,lineage,method, sep="_")]
if (!is.null(opts$annos)) {
anno_dt <- lapply(opts$annos, function(anno) fread(sprintf("%s/%s.bed", io$annos_dir, anno),
colClasses = c("character", "integer", "integer", "character", "character", "character"))[, c(1, 2, 3, 4, 5, 6)]) %>%
rbindlist %>% setnames(c("chr", "start", "end", "strand", "id", "anno")) %>% .[,c("anno", "chr") := list(as.factor(anno), as.factor(chr))]
}
# stats <- data.table(sample=opts$cells, context="CG", coverage=0, mean=0)
stats <- data.table(expand.grid(opts$cells,c(opts$annos,"all"))) %>% setnames(c("sample","anno")) %>%
.[,c("coverage","mean"):=0]
for (cell in opts$cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$in.data,cell))) {
# print(sprintf("Loading %s accessibility...",cell))
# Load sample accessibility data
data <- fread(sprintf("zcat < %s/%s.tsv.gz",io$in.data,cell), sep="\t", verbose=F, showProgress=F) %>%
.[,c("chr","pos","rate")]
# Compute genome-wide statistics
stats[sample==cell & anno=="all", c("coverage","mean"):=list(nrow(data),mean(data$rate)*100)]
# Calculate statistics per genomic context
data[,c("start","end") := list(pos,pos)] %>% .[,chr:=as.factor(chr)] %>% setkey(chr,start,end)
if (!is.null(opts$annos[1])) {
for (k in opts$annos) {
data_k <- foverlaps(data, anno_dt[anno==k]%>%setkey(chr,start,end), nomatch=0) %>%
.[,c("start","end","strand","i.start","i.end"):=NULL]
}
}
} else {
print(sprintf("Sample %s not found for accessibility",cell))
}
}
# fwrite(stats, file=io$stats, sep="\t", row.names=F, col.names=T)
# stats <- fread(io$stats)
stats <- stats %>% merge(metadata[,c("id_acc","stage","stage_lineage","method","plate","embryo")] %>% setnames("id_acc","sample"))
stats_filt <- stats[anno=="all"] %>% setkey(mean) %>% .[,sample:=factor(sample,levels=sample)]
p <- ggplot(stats_filt, aes(x=sample, y=mean)) +
geom_bar(stat='identity', position="dodge", fill="red") +
scale_y_continuous(expand=c(0,0)) +
ylab("Genome-wide mean accessibility rate") +
theme_pub()
print(p)
p <- ggplot(stats_filt, aes(x=sample, y=mean)) +
geom_bar(stat='identity', position="dodge", fill="#00BFC4") +
scale_y_continuous(expand=c(0,0)) +
ylab("Genome-wide mean accessibility rate") +
theme_pub()
print(p)
View(stats)
