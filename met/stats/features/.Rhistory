ov <- foverlaps(
# Feature metadata
feature_metadata[anno == ann, c("chr", "start", "end", "id")] %>% setkey(chr, start, end),
# Gene metadata
gene_metadata[, c("chr", "start", "end", "gene")] %>%
.[,c("start", "end") := list(start - opts$gene_window, end + opts$gene_window)] %>% setkey(chr, start, end),
nomatch = NA) %>% .[,c("gene", "id")]
ov <- ov[,.(gene=paste(gene,collapse="_")), by="id"]
# Merge with accessibility data
data_list[[ann]] <- merge(ov, data_tmp, by = "id") %>%
.[,c("id","gene","anno","sample","rate","m","weight","stage_lineage","group")]
}
# Gene-associated feature
else if (all(grepl("ENSMUSG", unique(data_tmp$id)) == TRUE)) {
data_list[[ann]] <- merge(data_tmp, gene_metadata[, c("id", "gene")], by="id") %>%
.[,c("id","gene","anno","sample","rate","m","weight","stage_lineage","group")]
}
}
data <- rbindlist(data_list)
# T-test with normality assumption
out <- data[, .(N1 = .SD[group=="0",.N], N2 = .SD[group=="1",.N],
diff = mean(.SD[group=="1",rate]) - mean(.SD[group=="0",rate]),
# p.value = t.test(x=.SD[group=="1",m], y=.SD[group=="0",m], var.equal=FALSE)[["p.value"]]), by = c("id","gene","anno")] %>%
p.value = t.test(x=.SD[group=="1",rate], y=.SD[group=="0",rate], var.equal=FALSE)[["p.value"]]), by = c("id","gene","anno")] %>%
.[, c("padj_fdr") := list(p.adjust(p.value, method = "fdr")), by = "anno"] %>%
.[, c("log_padj_fdr") := list(-log10(padj_fdr))] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>% setorder(padj_fdr)
# write.table(round_df(out, digits=2),
#             file=paste0(io$outdir,"/diff_accTEST.tsv"), quote=F, col.names = T, row.names = F, sep="\t")
View(out)
source("/Users/ricard/gastrulation/met/differential/utils.R")
library(data.table)
library(purrr)
library(ggplot2)
io <- list()
opts <- list()
## Define I/O ##
io$sample.metadata <- "/Users/ricard/data/gastrulation/sample_metadata.txt"
io$gene.metadata <- "/Users/ricard/data/ensembl/mouse/v87/BioMart/mRNA/Mmusculus_genes_BioMart.87.txt"
io$data.dir <- "/Users/ricard/data/gastrulation/acc/feature_level"
# io$data.file <- "/Users/ricard/data/gastrulation/acc/feature_level/acc_data.tsv.gz"
io$features.dir <- "/Users/ricard/data/gastrulation/features/filt"
io$outdir <- "/Users/ricard/gastrulation/acc/differential/out"
## Define options ##
# Define which annotations to look at
# Define which annotations to look at
# opts$general_annos <- c("prom_2000_2000","prom_100_100","genebody","CGI")
# ESC ChIP-seq
# opts$esc_annos <- c("ESC_ActiveEnhancers","ESC_SuperEnhancers","ESC_PrimedEnhancers")
# E3.5 ChIP-seq
# opts$e35_annos <- c("E3.5_Distal_H3K27ac")
# E6.5 ChIP-seq
# opts$e65_annos <- c("E6.5_Distal_H3K27ac")
# opts$annos <- c(opts$general_annos,opts$esc_annos,opts$e65_annos)
opts$annos <- c("E6.5_Distal_H3K27ac","prom_2000_2000","prom_500_500","prom_100_100","prom_50_50")
# Define which stage and lineages to look at
opts$stage_lineage1 <- c("E7.5_Ectoderm")
opts$stage_lineage2 <- c("E7.5_Cardiac")
# false discovery rate significance threshold
opts$threshold_fdr <- 0.1
# window length for the overlap between genes and features
opts$gene_window <- 25000
# Filtering criteria
opts$min.weight <- 3
opts$min.coverage <- 0.3
opts$fraction.sites <- 0.5
opts$min.n <- 15
# Define which cells to use
opts$cells <- fread(io$sample.metadata) %>% .[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
.[pass_accQC==T & stage_lineage%in%c(opts$stage_lineage1,opts$stage_lineage2),id_acc]
# Sample metadata
sample_metadata <- fread(io$sample.metadata) %>% .[id_acc%in%opts$cells] %>% .[,stage_lineage:=paste(stage,lineage,sep="_")]
# Gene metadata
gene_metadata <- fread(io$gene.metadata) %>% .[, chr := as.factor(sub("chr", "", chr))] %>%
setnames(c("ens_id","symbol"),c("id","gene"))
# Load accessibility data
data <- lapply(opts$annos, function(n) fread(sprintf("zcat < %s/acc_data_%s.tsv.gz",io$data.dir,n), showProgress=F)) %>% rbindlist
# data <- fread(sprintf("zcat < %s",io$data.file), showProgress=F) %>% .[sample%in%opts$cells & anno%in%opts$annos] %>% .[,anno:=factor(anno, levels=opts$annos)]
# Load genomic features
feature_metadata <- lapply(opts$annos, function(n) fread(sprintf("%s/%s.bed",io$features.dir,n), showProgress=F)) %>% rbindlist
colnames(feature_metadata) <- c("chr","start","end","strand","id","anno")
# Merge accessibility data and sample metadata
data <- data %>% merge(sample_metadata[,c("sample","stage","stage_lineage")], by="sample") %>% setkey(anno)
# Define the two differnetial groups
data[,group:=as.factor(as.numeric(stage_lineage%in%opts$stage_lineage2))]
sample_metadata[,group:=as.factor(as.numeric(stage_lineage%in%opts$stage_lineage2))]
# Convert beta value to M value
data[,m:=log2(((rate/100)+0.01)/(1-(rate/100)+0.01))]
# Remove sex chromosomes because it might have inherently large variation due to gender
data <- merge(data,feature_metadata[,c("id","chr","anno")], by=c("id","anno")) %>% .[!chr %in% c("X","Y")] %>% .[,chr:=NULL]
# Filter by weight
data <- data[weight>=opts$min.weight]
# data <- data %>% split(.$anno) %>% map(~ .[weight>=opts$min.weight[unique(anno)]]) %>% rbindlist
# Filter features by coverage
# keep_cov_sites <- data %>% split(.$anno) %>% map(~ .[,.(cov=.N/length(opts$cells)), by = c("id")] %>% .[cov >= opts$min.coverage, id])
# data <- data %>% split(.$anno) %>% map2(., names(.), function(x,y) x[id %in% keep_cov_sites[[y]]]) %>% rbindlist
# Filter features by coverage (by stage_lineage)
for (sl in unique(data$stage_lineage)) {
data[stage_lineage==sl,Ntotal:=sample_metadata[stage_lineage==sl,.N]]
}
keep_cov_sites <- data %>% split(.$stage_lineage) %>% map(~ .[, cov:=.N/Ntotal, by=c("id","anno")] %>% .[cov >= opts$min.coverage] %>% .[,id_anno:=paste(id,anno,sep="_")] %>% .$id_anno)
data <- data %>% .[,id_anno:=paste(id,anno,sep="_")] %>% .[id_anno%in%Reduce("intersect",keep_cov_sites)] %>% .[,"Ntotal":=NULL]
# Filter by variance
keep_hv_sites <- data %>% split(.$anno) %>% map(~ .[,.(var = var(rate)), by="id"] %>% setorder(-var)  %>% head(n = nrow(.) * opts$fraction.sites) %>% .$id)
data <- data %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[id %in% keep_hv_sites[[y]]]) %>% rbindlist
# Filter features by minimum number of cells per group
remove_n_sites <- data %>% split(.$anno) %>% map(~ .[,.(N=min(.N)), by=c("id","group")] %>% .[N<opts$min.n,id])
data <- data %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[!id %in% remove_n_sites[[y]]]) %>% rbindlist
data_list <- list()
for (ann in unique(data$anno)){
data_tmp <- data[anno == ann, ]
# Non gene-associated feature
if (all(grepl("ENSMUSG", unique(data_tmp$id)) == FALSE)) {
ov <- foverlaps(
# Feature metadata
feature_metadata[anno == ann, c("chr", "start", "end", "id")] %>% setkey(chr, start, end),
# Gene metadata
gene_metadata[, c("chr", "start", "end", "gene")] %>%
.[,c("start", "end") := list(start - opts$gene_window, end + opts$gene_window)] %>% setkey(chr, start, end),
nomatch = NA) %>% .[,c("gene", "id")]
ov <- ov[,.(gene=paste(gene,collapse="_")), by="id"]
# Merge with accessibility data
data_list[[ann]] <- merge(ov, data_tmp, by = "id") %>%
.[,c("id","gene","anno","sample","rate","m","weight","stage_lineage","group")]
}
# Gene-associated feature
else if (all(grepl("ENSMUSG", unique(data_tmp$id)) == TRUE)) {
data_list[[ann]] <- merge(data_tmp, gene_metadata[, c("id", "gene")], by="id") %>%
.[,c("id","gene","anno","sample","rate","m","weight","stage_lineage","group")]
}
}
data <- rbindlist(data_list)
# T-test with normality assumption
out <- data[, .(N1 = .SD[group=="0",.N], N2 = .SD[group=="1",.N],
diff = mean(.SD[group=="1",rate]) - mean(.SD[group=="0",rate]),
# p.value = t.test(x=.SD[group=="1",m], y=.SD[group=="0",m], var.equal=FALSE)[["p.value"]]), by = c("id","gene","anno")] %>%
p.value = t.test(x=.SD[group=="1",rate], y=.SD[group=="0",rate], var.equal=FALSE)[["p.value"]]), by = c("id","gene","anno")] %>%
.[, c("padj_fdr") := list(p.adjust(p.value, method = "fdr")), by = "anno"] %>%
.[, c("log_padj_fdr") := list(-log10(padj_fdr))] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>% setorder(padj_fdr)
# write.table(round_df(out, digits=2),
#             file=paste0(io$outdir,"/diff_accTEST.tsv"), quote=F, col.names = T, row.names = F, sep="\t")
View(out)
# Per context
out %>% setkey(anno) %>% split(.$anno) %>% map(function(x) {
# pdf(paste0(io$outdir,"/volcano_",unique(x$anno),".pdf"));
gg_volcano_plot(x, title=unique(x$anno))
# dev.off();
}
)
head(out)
View(out)
tmp <- head(setkey(out,padj_fdr),n=10)
for (i in 1:nrow(tmp)) {
foo <- data[id==tmp[i,id] & anno==tmp[i,anno]] %>% setkey(group,rate) %>% .[,sample:=factor(sample,levels=sample)]
p <- ggplot(foo, aes(x=stage_lineage, y=rate)) +
geom_jitter(aes(color=stage_lineage), size=2.0) +
geom_boxplot(aes(fill=stage_lineage), alpha=0.5, outlier.shape=NA) +
# scale_x_discrete(labels=c("PE","EPI")) +
# scale_color_discrete(labels=c("PE","EPI")) +
# scale_fill_discrete(labels=c("PE","EPI")) +
labs(x="", y="Accessibikity rate", title= sprintf("id: %s\ngene: %s\nanno: %s",tmp[i,id],tmp[i,gene],tmp[i,anno])) +
# theme_bw()
boxplot_theme() +
theme(
plot.title = element_text(size=rel(1.5), hjust=0.5, vjust=0)
)
print(p)
# pdf(sprintf("%s/%d_%s_%s_%s.pdf",io$outdir,i,tmp[i,anno],tmp[i,id],tmp[i,gene]))
# print(p)
# dev.off()
}
View(out)
# pdf(paste0(io$outdir,"/volcano_",unique(x$anno),".pdf"));
gg_volcano_plot(x, title=unique(x$anno))
# Global
# gg_volcano_plot(out)
# Per context
out %>% setkey(anno) %>% split(.$anno) %>% map(function(x) {
# pdf(paste0(io$outdir,"/volcano_",unique(x$anno),".pdf"));
gg_volcano_plot(x, title=unique(x$anno))
# dev.off();
}
)
source('~/gastrulation/met/differential/utils.R', echo=TRUE)
# Global
# gg_volcano_plot(out)
# Per context
out %>% setkey(anno) %>% split(.$anno) %>% map(function(x) {
# pdf(paste0(io$outdir,"/volcano_",unique(x$anno),".pdf"));
(x, title=unique(x$anno))
# Per context
out %>% setkey(anno) %>% split(.$anno) %>% map(function(x) {
# pdf(paste0(io$outdir,"/volcano_",unique(x$anno),".pdf"));
(x, title=unique(x$anno))
gg_volcano_plot <- function(tmp, title = "") {
negative_hits <- tmp[sig==TRUE & diff<0,id]
positive_hits <- tmp[sig==TRUE & diff>0,id]
all <- nrow(tmp)
xlim <- max(abs(tmp$diff))
ylim <- max(-log10(tmp$p.value))
# p <- ggplot(tmp, aes(x=diff, y=-padj_fdr)) +
# p <- ggplot(tmp, aes(x=diff, y=-log10(padj_fdr))) +
p <- ggplot(tmp, aes(x=diff, y=-log10(p.value))) +
labs(title=title, x="Methylation rate difference", y=expression(paste("-log"[10],"(p.value)"))) +
# geom_hline(yintercept = -log10(opts$threshold_fdr), color="blue") +
geom_segment(aes(x=0, xend=0, y=0, yend=max(-log10(p.value), na.rm=T)), color="orange") +
geom_point(aes(color=sig), size=2) +
scale_color_manual(values=c("black","red")) +
scale_x_continuous(limits=c(-xlim-2,xlim+2)) +
scale_y_continuous(limits=c(0,ylim+1)) +
# annotate("text", x=0, y=ylim+1, size=7, label=sprintf("(%d)", all)) +
# annotate("text", x=-10, y=ylim+1, size=7, label=sprintf("%d (-)",length(negative_hits))) +
# annotate("text", x=10, y=ylim+1, size=7, label=sprintf("%d (+)",length(positive_hits))) +
ggrepel::geom_text_repel(data=head(tmp[sig == TRUE],n=10), aes(x=diff, y=-log10(p.value), label=gene), size=6) +
scatter_theme()
return(p)
}
# Global
gg_volcano_plot(out)
# Per context
out %>% setkey(anno) %>% split(.$anno) %>% map(function(x) {
# pdf(paste0(io$outdir,"/volcano_",unique(x$anno),".pdf"));
gg_volcano_plot(x, title=unique(x$anno))
# dev.off();
}
)
scatter_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,10,0), hjust=0.5),
axis.text=element_text(size=rel(1.75), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,10,0,0)),
axis.title.x = element_text(margin=margin(10,0,0,0)),
legend.position="none",
panel.border=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
gg_volcano_plot <- function(tmp, title = "") {
negative_hits <- tmp[sig==TRUE & diff<0,id]
positive_hits <- tmp[sig==TRUE & diff>0,id]
all <- nrow(tmp)
xlim <- max(abs(tmp$diff))
ylim <- max(-log10(tmp$p.value))
# p <- ggplot(tmp, aes(x=diff, y=-padj_fdr)) +
# p <- ggplot(tmp, aes(x=diff, y=-log10(padj_fdr))) +
p <- ggplot(tmp, aes(x=diff, y=-log10(p.value))) +
labs(title=title, x="Accessibility rate difference", y=expression(paste("-log"[10],"(p.value)"))) +
# geom_hline(yintercept = -log10(opts$threshold_fdr), color="blue") +
geom_segment(aes(x=0, xend=0, y=0, yend=max(-log10(p.value), na.rm=T)), color="orange") +
geom_point(aes(color=sig), size=2) +
scale_color_manual(values=c("black","red")) +
scale_x_continuous(limits=c(-xlim-2,xlim+2)) +
scale_y_continuous(limits=c(0,ylim+1)) +
# annotate("text", x=0, y=ylim+1, size=7, label=sprintf("(%d)", all)) +
# annotate("text", x=-10, y=ylim+1, size=7, label=sprintf("%d (-)",length(negative_hits))) +
# annotate("text", x=10, y=ylim+1, size=7, label=sprintf("%d (+)",length(positive_hits))) +
ggrepel::geom_text_repel(data=head(tmp[sig == TRUE],n=10), aes(x=diff, y=-log10(p.value), label=gene), size=6) +
scatter_theme()
return(p)
}
boxplot_theme <- function() {
p <- theme(
plot.title = element_text(size=30, hjust=0.5, margin=margin(0,0,20,0)),
axis.title.y = element_text(colour="black", size=20, vjust=1.5),
axis.title.x = element_text(colour="black", size=20, vjust=1.5, margin=margin(15,0,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.6)),
axis.text.y = element_text(colour="black",size=rel(1.6)),
axis.line = element_line(colour="black", size=rel(0.7)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.position="none",
legend.text=element_text(size=15),
legend.title=element_blank(),
legend.background=element_blank(),
panel.border = element_blank()
)
}
round_df <- function(df, digits) {
nums <- names(which(vapply(df, is.numeric, FUN.VALUE = logical(1))))
df[,(nums) := round(.SD,digits), .SDcols=nums]
return(df)
}
# Per context
out %>% setkey(anno) %>% split(.$anno) %>% map(function(x) {
# pdf(paste0(io$outdir,"/volcano_",unique(x$anno),".pdf"));
gg_volcano_plot(x, title=unique(x$anno))
# dev.off();
}
)
View(out)
opts$fraction.sites
source("/Users/ricard/gastrulation/met/differential/utils.R")
library(data.table)
library(purrr)
library(ggplot2)
io <- list()
opts <- list()
## Define I/O ##
io$sample.metadata <- "/Users/ricard/data/gastrulation/sample_metadata.txt"
io$gene.metadata <- "/Users/ricard/data/ensembl/mouse/v87/BioMart/mRNA/Mmusculus_genes_BioMart.87.txt"
io$data.dir <- "/Users/ricard/data/gastrulation/acc/feature_level"
# io$data.file <- "/Users/ricard/data/gastrulation/acc/feature_level/acc_data.tsv.gz"
io$features.dir <- "/Users/ricard/data/gastrulation/features/filt"
io$outdir <- "/Users/ricard/gastrulation/acc/differential/out"
## Define options ##
# Define which annotations to look at
# Define which annotations to look at
# opts$general_annos <- c("prom_2000_2000","prom_100_100","genebody","CGI")
# ESC ChIP-seq
# opts$esc_annos <- c("ESC_ActiveEnhancers","ESC_SuperEnhancers","ESC_PrimedEnhancers")
# E3.5 ChIP-seq
# opts$e35_annos <- c("E3.5_Distal_H3K27ac")
# E6.5 ChIP-seq
# opts$e65_annos <- c("E6.5_Distal_H3K27ac")
# opts$annos <- c(opts$general_annos,opts$esc_annos,opts$e65_annos)
opts$annos <- c("E6.5_Distal_H3K27ac","prom_2000_2000","prom_500_500","prom_100_100","prom_50_50")
# Define which stage and lineages to look at
opts$stage_lineage1 <- c("E7.5_Ectoderm")
opts$stage_lineage2 <- c("E7.5_Cardiac")
# false discovery rate significance threshold
opts$threshold_fdr <- 0.1
# window length for the overlap between genes and features
opts$gene_window <- 25000
# Filtering criteria
opts$min.weight <- 3
opts$min.coverage <- 0.3
opts$fraction.sites <- 0.5
opts$min.n <- 15
# Define which cells to use
opts$cells <- fread(io$sample.metadata) %>% .[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
.[pass_accQC==T & stage_lineage%in%c(opts$stage_lineage1,opts$stage_lineage2),id_acc]
# Sample metadata
sample_metadata <- fread(io$sample.metadata) %>% .[id_acc%in%opts$cells] %>% .[,stage_lineage:=paste(stage,lineage,sep="_")]
# Gene metadata
gene_metadata <- fread(io$gene.metadata) %>% .[, chr := as.factor(sub("chr", "", chr))] %>%
setnames(c("ens_id","symbol"),c("id","gene"))
# Load accessibility data
data <- lapply(opts$annos, function(n) fread(sprintf("zcat < %s/acc_data_%s.tsv.gz",io$data.dir,n), showProgress=F)) %>% rbindlist
# data <- fread(sprintf("zcat < %s",io$data.file), showProgress=F) %>% .[sample%in%opts$cells & anno%in%opts$annos] %>% .[,anno:=factor(anno, levels=opts$annos)]
# Load genomic features
feature_metadata <- lapply(opts$annos, function(n) fread(sprintf("%s/%s.bed",io$features.dir,n), showProgress=F)) %>% rbindlist
colnames(feature_metadata) <- c("chr","start","end","strand","id","anno")
# Merge accessibility data and sample metadata
data <- data %>% merge(sample_metadata[,c("sample","stage","stage_lineage")], by="sample") %>% setkey(anno)
# Define the two differnetial groups
data[,group:=as.factor(as.numeric(stage_lineage%in%opts$stage_lineage2))]
sample_metadata[,group:=as.factor(as.numeric(stage_lineage%in%opts$stage_lineage2))]
# Convert beta value to M value
data[,m:=log2(((rate/100)+0.01)/(1-(rate/100)+0.01))]
# Remove sex chromosomes because it might have inherently large variation due to gender
data <- merge(data,feature_metadata[,c("id","chr","anno")], by=c("id","anno"))# %>% .[!chr %in% c("X","Y")] %>% .[,chr:=NULL]
# Filter by weight
data <- data[weight>=opts$min.weight]
data[gene=="Nav2"]
data
data[id=="E6.5_Distal_H3K27ac_12024"]
data[id=="E6.5_Distal_H3K27ac_12024",.N,by="stage_lineage"]
# Filter features by coverage (by stage_lineage)
for (sl in unique(data$stage_lineage)) {
data[stage_lineage==sl,Ntotal:=sample_metadata[stage_lineage==sl,.N]]
}
keep_cov_sites <- data %>% split(.$stage_lineage) %>% map(~ .[, cov:=.N/Ntotal, by=c("id","anno")] %>% .[cov >= opts$min.coverage] %>% .[,id_anno:=paste(id,anno,sep="_")] %>% .$id_anno)
"E6.5_Distal_H3K27ac_12024" %in% keep_cov_sites$E7.5_Cardiac
"E6.5_Distal_H3K27ac_12024" %in% keep_cov_sites$E7.5_Ectoderm
opts$cells
# Filter features by coverage
Ncells <- length(unique(data$sample))
Ncells
data <- data[, cov:=.N/Ncells, by=c("id","anno")] %>% .[cov >= opts$min.coverage] %>% .[,cov:=NULL]
data
# Filter features by coverage (by stage_lineage)
for (sl in unique(data$stage_lineage)) {
data[stage_lineage==sl,Ntotal:=sample_metadata[stage_lineage==sl,.N]]
}
data
data
unique(data$Ntotal)
data[stage_lineage=="E7.5_Ectoderm"]
data[stage_lineage=="E7.5_Ectoderm", cov:=.N/Ntotal, by=c("id","anno")]
data
data[id=="E6.5_Distal_H3K27ac_12024"]
opts$min.coverage
keep_cov_sites <- data %>% split(.$stage_lineage) %>% map(~ .[, cov:=.N/Ntotal, by=c("id","anno")] %>% .[cov >= opts$min.coverage] %>% .[,id_anno:=paste(id,anno,sep="_")] %>% .$id_anno)
"E6.5_Distal_H3K27ac_12024_E6.5_Distal_H3K27ac" %in% keep_cov_sites$E7.5_Ectoderm
"E6.5_Distal_H3K27ac_12024_E6.5_Distal_H3K27ac" %in% keep_cov_sites$E7.5_Cardiac
data <- data %>% .[,id_anno:=paste(id,anno,sep="_")] %>% .[id_anno%in%Reduce("intersect",keep_cov_sites)] %>% .[,"Ntotal":=NULL]
# Filter by variance
keep_hv_sites <- data %>% split(.$anno) %>% map(~ .[,.(var = var(rate)), by="id"] %>% setorder(-var)  %>% head(n = nrow(.) * opts$fraction.sites) %>% .$id)
"E6.5_Distal_H3K27ac_12024" %in% keep_hv_sites$E6.5_Distal_H3K27ac
data %>% split(.$anno) %>% map(~ .[,.(var = var(rate)), by="id"]
)
adsd <- data %>% split(.$anno) %>% map(~ .[,.(var = var(rate)), by="id"])
adsd[id=="E6.5_Distal_H3K27ac_12024"]
adsd$E6.5_Distal_H3K27ac[id=="E6.5_Distal_H3K27ac_12024"]
View(adsd$E6.5_Distal_H3K27ac)
source("/Users/ricard/gastrulation/met/differential/utils.R")
library(data.table)
library(purrr)
library(ggplot2)
io <- list()
opts <- list()
## Define I/O ##
io$sample.metadata <- "/Users/ricard/data/gastrulation/sample_metadata.txt"
io$gene.metadata <- "/Users/ricard/data/ensembl/mouse/v87/BioMart/mRNA/Mmusculus_genes_BioMart.87.txt"
io$data.dir <- "/Users/ricard/data/gastrulation/acc/feature_level"
# io$data.file <- "/Users/ricard/data/gastrulation/acc/feature_level/acc_data.tsv.gz"
io$features.dir <- "/Users/ricard/data/gastrulation/features/filt"
io$outdir <- "/Users/ricard/gastrulation/acc/differential/out"
## Define options ##
# Define which annotations to look at
# Define which annotations to look at
# opts$general_annos <- c("prom_2000_2000","prom_100_100","genebody","CGI")
# ESC ChIP-seq
# opts$esc_annos <- c("ESC_ActiveEnhancers","ESC_SuperEnhancers","ESC_PrimedEnhancers")
# E3.5 ChIP-seq
# opts$e35_annos <- c("E3.5_Distal_H3K27ac")
# E6.5 ChIP-seq
# opts$e65_annos <- c("E6.5_Distal_H3K27ac")
# opts$annos <- c(opts$general_annos,opts$esc_annos,opts$e65_annos)
opts$annos <- c("E6.5_Distal_H3K27ac","prom_2000_2000","prom_500_500","prom_100_100","prom_50_50")
# Define which stage and lineages to look at
opts$stage_lineage1 <- c("E7.5_Ectoderm")
opts$stage_lineage2 <- c("E7.5_Cardiac")
# false discovery rate significance threshold
opts$threshold_fdr <- 0.1
# window length for the overlap between genes and features
opts$gene_window <- 25000
# Filtering criteria
opts$min.weight <- 3
opts$min.coverage <- 0.3
opts$fraction.sites <- 0.75
opts$min.n <- 15
# Define which cells to use
opts$cells <- fread(io$sample.metadata) %>% .[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
.[pass_accQC==T & stage_lineage%in%c(opts$stage_lineage1,opts$stage_lineage2),id_acc]
# Sample metadata
sample_metadata <- fread(io$sample.metadata) %>% .[id_acc%in%opts$cells] %>% .[,stage_lineage:=paste(stage,lineage,sep="_")]
# Gene metadata
gene_metadata <- fread(io$gene.metadata) %>% .[, chr := as.factor(sub("chr", "", chr))] %>%
setnames(c("ens_id","symbol"),c("id","gene"))
# Load accessibility data
data <- lapply(opts$annos, function(n) fread(sprintf("zcat < %s/acc_data_%s.tsv.gz",io$data.dir,n), showProgress=F)) %>% rbindlist
# data <- fread(sprintf("zcat < %s",io$data.file), showProgress=F) %>% .[sample%in%opts$cells & anno%in%opts$annos] %>% .[,anno:=factor(anno, levels=opts$annos)]
# Load genomic features
feature_metadata <- lapply(opts$annos, function(n) fread(sprintf("%s/%s.bed",io$features.dir,n), showProgress=F)) %>% rbindlist
colnames(feature_metadata) <- c("chr","start","end","strand","id","anno")
# Merge accessibility data and sample metadata
data <- data %>% merge(sample_metadata[,c("sample","stage","stage_lineage")], by="sample") %>% setkey(anno)
# Define the two differnetial groups
data[,group:=as.factor(as.numeric(stage_lineage%in%opts$stage_lineage2))]
sample_metadata[,group:=as.factor(as.numeric(stage_lineage%in%opts$stage_lineage2))]
# Convert beta value to M value
data[,m:=log2(((rate/100)+0.01)/(1-(rate/100)+0.01))]
# Remove sex chromosomes because it might have inherently large variation due to gender
data <- merge(data,feature_metadata[,c("id","chr","anno")], by=c("id","anno"))# %>% .[!chr %in% c("X","Y")] %>% .[,chr:=NULL]
# Filter by weight
data <- data[weight>=opts$min.weight]
# data <- data %>% split(.$anno) %>% map(~ .[weight>=opts$min.weight[unique(anno)]]) %>% rbindlist
# Filter features by coverage
# keep_cov_sites <- data %>% split(.$anno) %>% map(~ .[,.(cov=.N/length(opts$cells)), by = c("id")] %>% .[cov >= opts$min.coverage, id])
# data <- data %>% split(.$anno) %>% map2(., names(.), function(x,y) x[id %in% keep_cov_sites[[y]]]) %>% rbindlist
# Filter features by coverage (by stage_lineage)
for (sl in unique(data$stage_lineage)) {
data[stage_lineage==sl,Ntotal:=sample_metadata[stage_lineage==sl,.N]]
}
keep_cov_sites <- data %>% split(.$stage_lineage) %>% map(~ .[, cov:=.N/Ntotal, by=c("id","anno")] %>% .[cov >= opts$min.coverage] %>% .[,id_anno:=paste(id,anno,sep="_")] %>% .$id_anno)
data <- data %>% .[,id_anno:=paste(id,anno,sep="_")] %>% .[id_anno%in%Reduce("intersect",keep_cov_sites)] %>% .[,"Ntotal":=NULL]
# Filter features by minimum number of cells per group
remove_n_sites <- data %>% split(.$anno) %>% map(~ .[,.(N=min(.N)), by=c("id","group")] %>% .[N<opts$min.n,id])
data <- data %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[!id %in% remove_n_sites[[y]]]) %>% rbindlist
# Filter by variance
keep_hv_sites <- data %>% split(.$anno) %>% map(~ .[,.(var = var(rate)), by="id"] %>% setorder(-var) %>% head(n = nrow(.) * opts$fraction.sites) %>% .$id)
data <- data %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[id %in% keep_hv_sites[[y]]]) %>% rbindlist
data_list <- list()
for (ann in unique(data$anno)){
data_tmp <- data[anno == ann, ]
# Non gene-associated feature
if (all(grepl("ENSMUSG", unique(data_tmp$id)) == FALSE)) {
ov <- foverlaps(
# Feature metadata
feature_metadata[anno == ann, c("chr", "start", "end", "id")] %>% setkey(chr, start, end),
# Gene metadata
gene_metadata[, c("chr", "start", "end", "gene")] %>%
.[,c("start", "end") := list(start - opts$gene_window, end + opts$gene_window)] %>% setkey(chr, start, end),
nomatch = NA) %>% .[,c("gene", "id")]
ov <- ov[,.(gene=paste(gene,collapse="_")), by="id"]
# Merge with accessibility data
data_list[[ann]] <- merge(ov, data_tmp, by = "id") %>%
.[,c("id","gene","anno","sample","rate","m","weight","stage_lineage","group")]
}
# Gene-associated feature
else if (all(grepl("ENSMUSG", unique(data_tmp$id)) == TRUE)) {
data_list[[ann]] <- merge(data_tmp, gene_metadata[, c("id", "gene")], by="id") %>%
.[,c("id","gene","anno","sample","rate","m","weight","stage_lineage","group")]
}
}
data <- rbindlist(data_list)
# T-test with normality assumption
out <- data[, .(N1 = .SD[group=="0",.N], N2 = .SD[group=="1",.N],
diff = mean(.SD[group=="1",rate]) - mean(.SD[group=="0",rate]),
# p.value = t.test(x=.SD[group=="1",m], y=.SD[group=="0",m], var.equal=FALSE)[["p.value"]]), by = c("id","gene","anno")] %>%
p.value = t.test(x=.SD[group=="1",rate], y=.SD[group=="0",rate], var.equal=FALSE)[["p.value"]]), by = c("id","gene","anno")] %>%
.[, c("padj_fdr") := list(p.adjust(p.value, method = "fdr")), by = "anno"] %>%
.[, c("log_padj_fdr") := list(-log10(padj_fdr))] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>% setorder(padj_fdr)
View(out)
