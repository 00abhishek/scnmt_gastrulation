View(sample_metadata)
View(tmp)
# library(MOFA)
library(BioFAMtools)
# devtools::load_all("/homes/ricard/biofam/BioFAMtools")
library(Rtsne)
library(data.table)
library(purrr)
library(ggplot2)
library(argparse)
library(cluster)
ClusterPurity <- function(clusters, classes) {
sum(apply(table(classes, clusters), 2, max)) / length(clusters)
}
p <- ArgumentParser(description='')
p$add_argument('-m',  '--model',           type="character",             help='Model')
p$add_argument('-a',  '--anno',           type="character",  nargs='+',  help='genomic context (i.e. genebody, promoters, etc.')
p$add_argument('-hvg',  '--hvg',  type="integer",  help='Number of highly variable features')
p$add_argument('-t',  '--trial',  type="integer",  default=1, help='Trial number')
p$add_argument('-o',  '--outprefix',        type="character",              help='Output directory')
args <- p$parse_args(commandArgs(TRUE))
args <- list()
args$model <- "betabinomial"
args$anno <- c("distal_H3K27ac_cortex")
args$outprefix <- "/Users/ricard/data/Ecker_2017/mouse/variability/dimensionality_reduction/test"
# args$outprefix <- "/hps/nobackup/stegle/users/ricard/Ecker_2017/mouse/variability/dimensionality_reduction/tmp/test"
args$hvg <- 250
args$trial <- 1
############################
## Define I/O and options ##
############################
if (grepl("ricard",Sys.info()['nodename'])) {
source("/Users/ricard/Ecker_2017/variability/dimensionality_reduction/load_settings.R")
} else {
source("/homes/ricard/Ecker_2017/variability/dimensionality_reduction/load_settings.R")
}
io$results.dir <- paste0(io$basedir,"/variability/betabinomial/per_feature")
io$outprefix <- args$outprefix
opts$anno <- args$anno
opts$model <- args$model
opts$hvg <- args$hvg
################################
## Load beta-binomial results ##
################################
betabin <- list()
for (i in opts$anno) {
betabin[[i]] <- fread(sprintf("%s/%s.txt.gz",io$results.dir,i)) %>%
.[,c("anno"):=list(i)] %>% .[,c("id","anno","rho","mu")]
}
betabin <- rbindlist(betabin) %>%
.[mu>0.10 & mu<0.90]
# Calculate variance based on the binomial and betabinomial models
# N <- 100
# betabin <- betabin %>%
#   .[,var.binomial:=N*mu*(1-mu)] %>%
#   .[,var.betabinomial:=N*mu*(1-mu)*(1+(N-1)*rho)]
###########################
## Load methylation data ##
###########################
met_dt <- lapply(opts$anno, function(n) {
data <- fread(sprintf("%s/%s.tsv.gz",io$data.dir,n), showProgress=F) %>% .[V1%in%opts$cells]
}) %>% rbindlist %>% setnames(c("sample","id","anno","rate","Ntotal"))
#################
## Filter data ##
#################
# Filter features by minimum number of CpG sites
met_dt <- met_dt[Ntotal>=opts$min.CpGs]
# Filter features by coverage
met_dt <- met_dt[,N:=.N,by=c("id","anno")] %>% .[N>=opts$min.cells] %>% .[,N:=NULL]
# Filter features by variance
if (opts$model=="binomial") {
hvgs <- betabin %>% split(.$anno) %>%
map(function(x) x %>% .[,var.binomial:=mu*(1-mu)] %>% setorder(-var.binomial) %>% head(n=opts$hvg) %>% .$id)
met_dt <- met_dt %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[id %in% hvgs[[y]]]) %>% rbindlist
} else if (opts$model=="normal") {
hvgs <- met_dt %>% split(.$anno) %>%
map(~ .[,.(var=var(rate)), by="id"] %>% setorder(-var) %>% head(n=opts$hvg) %>% .$id)
met_dt <- met_dt %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[id %in% hvgs[[y]]]) %>% rbindlist
} else if (opts$model=="betabinomial") {
hvgs <- betabin %>% split(.$anno) %>%
map(function(x) x %>% setorder(-rho) %>% head(n=opts$hvg) %>% .$id)
met_dt <- met_dt %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[id %in% hvgs[[y]]]) %>% rbindlist
}
# library(VennDiagram)
# foo <- venn.diagram(
#   x = list("Normal"=hvgs1$distal_H3K27ac_cortex,
#            "Binomial"=hvgs2$distal_H3K27ac_cortex,
#            "Beta-binomial"=hvgs3$distal_H3K27ac_cortex
#   ),
#   filename=NULL,
#   col="transparent", fill=c("#3CB54E","#F37A71","#6691CB"), alpha = 0.60, cex = 1.5,
#   fontfamily = "serif", fontface = "bold",
#   euler.d = TRUE
# )
#
# pdf(file=sprintf("%s/venn_%s.pdf",io$outdir,i))
# grid.draw(foo)
# dev.off()
################
## Parse data ##
################
# Calculate M value from Beta value
met_dt[,m:=log2(((rate/100)+0.01)/(1-(rate/100)+0.01))]
# Create matrix from the data.table
dmatrix_list <- met_dt %>% split(.$anno) %>%
map(~
dcast(.[,c("sample","id","m")], formula=sample~id, value.var="m") %>% as.data.frame %>%
tibble::column_to_rownames("sample") %>% as.matrix
)
lapply(dmatrix_list,dim)
####################
## Fit MOFA model ##
####################
object <- create_biofam(dmatrix_list)
data_opts <- get_default_data_options(object)
model_opts <- get_default_model_options(object)
model_opts$num_factors <- 25
model_opts$sl_z <- FALSE
model_opts$sl_w <- TRUE
model_opts$ard_w <- FALSE
model_opts$ard_z <- FALSE
train_opts <- get_default_training_options(object)
train_opts$maxiter <- 2000
train_opts$convergence_mode <- "fast"
train_opts$seed <- args$trial
train_opts$verbose <- FALSE
object <- prepare_biofam(
object = object,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
)
model <- run_biofam(object, outfile=paste0(io$outprefix,".hdf5"))
###################################
## Plot dimensionality reduction ##
###################################
factors <- names(which(model@cache$variance_explained$r2_per_factor$group1[,1]>0.001))
Z <- get_factors(model, factors=factors)[[1]]
Z <- Z[complete.cases(Z),,drop=F]
# plotFactorScatter(model, factors=c(1,2))
# run UMAP
library(umap)
umap.defaults$n_neighbors <- 15
umap.defaults$min_dist <- 0.5
umap.out <- umap(Z, config = umap.defaults)
Z.out <- umap.out$layout %>% as.data.table %>% .[,sample:=rownames(Z)]
source('~/biofam/BioFAMtools/R/run_biofam.R', echo=TRUE)
library(reticulate)
object <- create_biofam(dmatrix_list)
data_opts <- get_default_data_options(object)
model_opts <- get_default_model_options(object)
model_opts$num_factors <- 25
model_opts$sl_z <- FALSE
model_opts$sl_w <- TRUE
model_opts$ard_w <- FALSE
model_opts$ard_z <- FALSE
train_opts <- get_default_training_options(object)
train_opts$maxiter <- 2000
train_opts$convergence_mode <- "fast"
train_opts$seed <- args$trial
train_opts$verbose <- FALSE
object <- prepare_biofam(
object = object,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
)
model <- run_biofam(object, outfile=paste0(io$outprefix,".hdf5"))
factors <- names(which(model@cache$variance_explained$r2_per_factor$group1[,1]>0.001))
Z <- get_factors(model, factors=factors)[[1]]
Z <- Z[complete.cases(Z),,drop=F]
dim(Z)
Z
plotFactorScatter(model, factors=c(1,2))
plot_factors(model, factors=c(1,2))
plot_factors(model, factors=c(3,4))
plot_factors(model, factors=c(5,6))
plot_factors(model, factors=c(7,8))
plot_factors(model, factors=c(9,10))
# run UMAP
library(umap)
umap.defaults$n_neighbors <- 15
umap.defaults$min_dist <- 0.5
umap.out <- umap(Z, config = umap.defaults)
Z.out <- umap.out$layout %>% as.data.table %>% .[,sample:=rownames(Z)]
# Plot
to.plot <- Z.out %>% merge(sample_metadata,by="sample")
p <- ggplot(to.plot, aes(x=V1,y=V2)) +
# geom_point(aes(color=`foo`), alpha=0.7, size=1) +
geom_point(aes(color=`Neuron type 2`), alpha=0.7, size=1) +
labs(x="", y="") +
theme_classic() +
theme(
axis.ticks = element_blank(),
axis.text = element_blank(),
legend.position = "right"
)
p
library(umap)
umap.defaults$n_neighbors <- 15
umap.defaults$min_dist <- 0.25
umap.out <- umap(Z, config = umap.defaults)
Z.out <- umap.out$layout %>% as.data.table %>% .[,sample:=rownames(Z)]
# Run t-SNE
# set.seed(42)
# tsne <- Rtsne::Rtsne(Z, check_duplicates=FALSE, pca=FALSE, theta=0.5, dims=2)
# Z.out <- tsne$Y %>% as.data.table %>% .[,sample:=rownames(Z)]
# Plot
to.plot <- Z.out %>% merge(sample_metadata,by="sample")
# to.plot$foo <- to.plot$`Neuron type`=="mL4"
p <- ggplot(to.plot, aes(x=V1,y=V2)) +
# geom_point(aes(color=`foo`), alpha=0.7, size=1) +
geom_point(aes(color=`Neuron type 2`), alpha=0.7, size=1) +
labs(x="", y="") +
theme_classic() +
theme(
axis.ticks = element_blank(),
axis.text = element_blank(),
legend.position = "right"
)
p
p <- ggplot(to.plot, aes(x=V1,y=V2)) +
# geom_point(aes(color=`foo`), alpha=0.7, size=1) +
geom_point(aes(color=`Neuron type broad`), alpha=0.7, size=1) +
labs(x="", y="") +
theme_classic() +
theme(
axis.ticks = element_blank(),
axis.text = element_blank(),
legend.position = "right"
)
p
################
## Clustering ##
################
## Run k-means ##
ntrue_clusters <- length(unique(to.plot$`Neuron type broad`))
clustering <- cluster_samples(model, k=ntrue_clusters, factors="all")$cluster
to.plot <- data.table(sample=names(clustering), cluster=as.factor(clustering)) %>%
merge(sample_metadata,by="sample") %>% merge(Z.out)
# km = ClusterR::KMeans_rcpp(tsne$Y, clusters = ntrue_clusters, num_init = 5, max_iters = 100, initializer = 'kmeans++')
# pr = ClusterR::predict_KMeans(tsne$Y, km$centroids)
# to.plot <- data.table(sample=rownames(Z), cluster=pr) %>%
#     merge(sample_metadata,by="sample")
table(to.plot$cluster, to.plot$`Neuron type broad`)
p <- ggplot(to.plot, aes(x=V1,y=V2)) +
geom_point(aes(color=`cluster`), alpha=0.7, size=1) +
labs(x="", y="") +
theme_classic() +
theme(
axis.ticks = element_blank(),
axis.text = element_blank(),
legend.position = "right"
)
p
###############################
## Get clustering statistics ##
###############################
tmp <- data.table(
stage = opts$stage,
anno = paste(opts$anno, collapse="_"),
model = opts$model,
hvg = opts$hvg,
silhouette = as.numeric(NA),
purity = as.numeric(NA),
prediction_accuracy = as.numeric(NA)
)
# Calculate silhouette (from 0 to 1)
sh <- silhouette(to.plot$cluster, dist(Z))
tmp$silhouette <- summary(sh)$avg.width %>% round(3)
# Calculate purity (from 0 to 1)
tmp$purity <- ClusterPurity(to.plot$`Neuron type broad`, to.plot$cluster) %>% round(3)
##############################
## Random Forest prediction ##
##############################
df <- get_factors(model, factors=factors, as.data.frame = T) %>%
as.data.table %>%
merge(sample_metadata, by="sample") %>%
dcast(sample+`Neuron type broad`~factor, value.var="value") %>%
.[,`Neuron type broad`:=as.factor(`Neuron type broad`)] %>%
tibble::column_to_rownames("sample")
rf <- randomForest::randomForest(formula=`Neuron type broad`~., ntree=500, data=df)
accuracy <- mean(rf$predicted==df$`Neuron type broad`)
tmp$prediction_accuracy <- round(accuracy,3)
#################
## Save output ##
#################
fwrite(tmp, paste0(io$outprefix,".txt"))
pdf(paste0(io$outprefix,".pdf"), useDingbats=F, width=4, height=4)
print(p)
dev.off()
# library(MOFA)
library(BioFAMtools)
# devtools::load_all("/homes/ricard/biofam/BioFAMtools")
library(Rtsne)
library(data.table)
library(purrr)
library(ggplot2)
library(argparse)
library(cluster)
ClusterPurity <- function(clusters, classes) {
sum(apply(table(classes, clusters), 2, max)) / length(clusters)
}
p <- ArgumentParser(description='')
p$add_argument('-m',  '--model',           type="character",             help='Model')
p$add_argument('-a',  '--anno',           type="character",  nargs='+',  help='genomic context (i.e. genebody, promoters, etc.')
p$add_argument('-hvg',  '--hvg',  type="integer",  help='Number of highly variable features')
p$add_argument('-t',  '--trial',  type="integer",  default=1, help='Trial number')
p$add_argument('-o',  '--outprefix',        type="character",              help='Output directory')
args <- p$parse_args(commandArgs(TRUE))
args <- list()
args$model <- "betabinomial"
args$anno <- c("distal_H3K27ac_cortex")
args$outprefix <- "/Users/ricard/data/Ecker_2017/mouse/variability/dimensionality_reduction/test"
# args$outprefix <- "/hps/nobackup/stegle/users/ricard/Ecker_2017/mouse/variability/dimensionality_reduction/tmp/test"
args$hvg <- 250
args$trial <- 1
############################
## Define I/O and options ##
############################
if (grepl("ricard",Sys.info()['nodename'])) {
source("/Users/ricard/Ecker_2017/variability/dimensionality_reduction/load_settings.R")
} else {
source("/homes/ricard/Ecker_2017/variability/dimensionality_reduction/load_settings.R")
}
io$results.dir <- paste0(io$basedir,"/variability/betabinomial/per_feature")
io$outprefix <- args$outprefix
opts$anno <- args$anno
opts$model <- args$model
opts$hvg <- args$hvg
################################
## Load beta-binomial results ##
################################
betabin <- list()
for (i in opts$anno) {
betabin[[i]] <- fread(sprintf("%s/%s.txt.gz",io$results.dir,i)) %>%
.[,c("anno"):=list(i)] %>% .[,c("id","anno","rho","mu")]
}
betabin <- rbindlist(betabin) %>%
.[mu>0.10 & mu<0.90]
# Calculate variance based on the binomial and betabinomial models
# N <- 100
# betabin <- betabin %>%
#   .[,var.binomial:=N*mu*(1-mu)] %>%
#   .[,var.betabinomial:=N*mu*(1-mu)*(1+(N-1)*rho)]
###########################
## Load methylation data ##
###########################
met_dt <- lapply(opts$anno, function(n) {
data <- fread(sprintf("%s/%s.tsv.gz",io$data.dir,n), showProgress=F) %>% .[V1%in%opts$cells]
}) %>% rbindlist %>% setnames(c("sample","id","anno","rate","Ntotal"))
#################
## Filter data ##
#################
# Filter features by minimum number of CpG sites
met_dt <- met_dt[Ntotal>=opts$min.CpGs]
# Filter features by coverage
met_dt <- met_dt[,N:=.N,by=c("id","anno")] %>% .[N>=opts$min.cells] %>% .[,N:=NULL]
# Filter features by variance
if (opts$model=="binomial") {
hvgs <- betabin %>% split(.$anno) %>%
map(function(x) x %>% .[,var.binomial:=mu*(1-mu)] %>% setorder(-var.binomial) %>% head(n=opts$hvg) %>% .$id)
met_dt <- met_dt %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[id %in% hvgs[[y]]]) %>% rbindlist
} else if (opts$model=="normal") {
hvgs <- met_dt %>% split(.$anno) %>%
map(~ .[,.(var=var(rate)), by="id"] %>% setorder(-var) %>% head(n=opts$hvg) %>% .$id)
met_dt <- met_dt %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[id %in% hvgs[[y]]]) %>% rbindlist
} else if (opts$model=="betabinomial") {
hvgs <- betabin %>% split(.$anno) %>%
map(function(x) x %>% setorder(-rho) %>% head(n=opts$hvg) %>% .$id)
met_dt <- met_dt %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[id %in% hvgs[[y]]]) %>% rbindlist
}
# library(VennDiagram)
# foo <- venn.diagram(
#   x = list("Normal"=hvgs1$distal_H3K27ac_cortex,
#            "Binomial"=hvgs2$distal_H3K27ac_cortex,
#            "Beta-binomial"=hvgs3$distal_H3K27ac_cortex
#   ),
#   filename=NULL,
#   col="transparent", fill=c("#3CB54E","#F37A71","#6691CB"), alpha = 0.60, cex = 1.5,
#   fontfamily = "serif", fontface = "bold",
#   euler.d = TRUE
# )
#
# pdf(file=sprintf("%s/venn_%s.pdf",io$outdir,i))
# grid.draw(foo)
# dev.off()
################
## Parse data ##
################
# Calculate M value from Beta value
met_dt[,m:=log2(((rate/100)+0.01)/(1-(rate/100)+0.01))]
# Create matrix from the data.table
dmatrix_list <- met_dt %>% split(.$anno) %>%
map(~
dcast(.[,c("sample","id","m")], formula=sample~id, value.var="m") %>% as.data.frame %>%
tibble::column_to_rownames("sample") %>% as.matrix
)
lapply(dmatrix_list,dim)
####################
## Fit MOFA model ##
####################
object <- create_biofam(dmatrix_list)
data_opts <- get_default_data_options(object)
model_opts <- get_default_model_options(object)
model_opts$num_factors <- 25
model_opts$sl_z <- FALSE
model_opts$sl_w <- TRUE
model_opts$ard_w <- FALSE
model_opts$ard_z <- FALSE
train_opts <- get_default_training_options(object)
train_opts$maxiter <- 2000
train_opts$convergence_mode <- "fast"
train_opts$seed <- args$trial
train_opts$verbose <- FALSE
object <- prepare_biofam(
object = object,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
)
model <- run_biofam(object, outfile=paste0(io$outprefix,".hdf5"))
###################################
## Plot dimensionality reduction ##
###################################
factors <- names(which(model@cache$variance_explained$r2_per_factor$group1[,1]>0.001))
Z <- get_factors(model, factors=factors)[[1]]
Z <- Z[complete.cases(Z),,drop=F]
# run UMAP
library(umap)
umap.defaults$n_neighbors <- 15
umap.defaults$min_dist <- 0.25
umap.out <- umap(Z, config = umap.defaults)
Z.out <- umap.out$layout %>% as.data.table %>% .[,sample:=rownames(Z)]
# Run t-SNE
# set.seed(42)
# tsne <- Rtsne::Rtsne(Z, check_duplicates=FALSE, pca=FALSE, theta=0.5, dims=2)
# Z.out <- tsne$Y %>% as.data.table %>% .[,sample:=rownames(Z)]
# Plot
to.plot <- Z.out %>% merge(sample_metadata,by="sample")
# to.plot$foo <- to.plot$`Neuron type`=="mL4"
p <- ggplot(to.plot, aes(x=V1,y=V2)) +
# geom_point(aes(color=`foo`), alpha=0.7, size=1) +
geom_point(aes(color=`Neuron type broad`), alpha=0.7, size=1) +
labs(x="", y="") +
theme_classic() +
theme(
axis.ticks = element_blank(),
axis.text = element_blank(),
legend.position = "right"
)
p
################
## Clustering ##
################
## Run k-means ##
ntrue_clusters <- length(unique(to.plot$`Neuron type broad`))
clustering <- cluster_samples(model, k=ntrue_clusters, factors="all")$cluster
to.plot <- data.table(sample=names(clustering), cluster=as.factor(clustering)) %>%
merge(sample_metadata,by="sample") %>% merge(Z.out)
# km = ClusterR::KMeans_rcpp(tsne$Y, clusters = ntrue_clusters, num_init = 5, max_iters = 100, initializer = 'kmeans++')
# pr = ClusterR::predict_KMeans(tsne$Y, km$centroids)
# to.plot <- data.table(sample=rownames(Z), cluster=pr) %>%
#     merge(sample_metadata,by="sample")
table(to.plot$cluster, to.plot$`Neuron type broad`)
p <- ggplot(to.plot, aes(x=V1,y=V2)) +
geom_point(aes(color=`cluster`), alpha=0.7, size=1) +
labs(x="", y="") +
theme_classic() +
theme(
axis.ticks = element_blank(),
axis.text = element_blank(),
legend.position = "right"
)
p
###############################
## Get clustering statistics ##
###############################
tmp <- data.table(
stage = opts$stage,
anno = paste(opts$anno, collapse="_"),
model = opts$model,
trial = args$trial,
hvg = opts$hvg,
silhouette = as.numeric(NA),
purity = as.numeric(NA),
prediction_accuracy = as.numeric(NA)
)
# Calculate silhouette (from 0 to 1)
sh <- silhouette(to.plot$cluster, dist(Z))
tmp$silhouette <- summary(sh)$avg.width %>% round(3)
# Calculate purity (from 0 to 1)
tmp$purity <- ClusterPurity(to.plot$`Neuron type broad`, to.plot$cluster) %>% round(3)
##############################
## Random Forest prediction ##
##############################
df <- get_factors(model, factors=factors, as.data.frame = T) %>%
as.data.table %>%
merge(sample_metadata, by="sample") %>%
dcast(sample+`Neuron type broad`~factor, value.var="value") %>%
.[,`Neuron type broad`:=as.factor(`Neuron type broad`)] %>%
tibble::column_to_rownames("sample")
rf <- randomForest::randomForest(formula=`Neuron type broad`~., ntree=500, data=df)
accuracy <- mean(rf$predicted==df$`Neuron type broad`)
tmp$prediction_accuracy <- round(accuracy,3)
#################
## Save output ##
#################
fwrite(tmp, paste0(io$outprefix,".txt"))
pdf(paste0(io$outprefix,".pdf"), useDingbats=F, width=4, height=4)
print(p)
dev.off()
