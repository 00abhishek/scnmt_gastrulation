library(data.table)
library(purrr)
library(scater)
library(DropletUtils)
library(scran)
read10xCounts.rna <- function (directory) {
barcode.loc <- file.path(directory, "barcodes.tsv")
gene.loc <- file.path(directory, "genes.tsv")
matrix.loc <- file.path(directory, "matrix.mtx")
data_mat <- read10xMatrix(matrix.loc)
cell.info <- read.delim(barcode.loc, header = TRUE, colClasses = "character", stringsAsFactors = FALSE, quote = "", comment.char = "", sep=",") %>% DataFrame()
gene.info <- read.delim(gene.loc, header = TRUE, colClasses = "character", stringsAsFactors = FALSE, quote = "", comment.char = "", sep=",") %>% DataFrame()
rownames(data_mat) <- gene.info$gene_id
colnames(data_mat) <- cell.info$sample
SingleCellExperiment(list(counts = data_mat), rowData = gene.info, colData = cell.info)
}
read10xCounts.atac <- function (directory) {
barcode.loc <- file.path(directory, "barcodes.tsv")
gene.loc <- file.path(directory, "genes.tsv")
matrix.loc <- file.path(directory, "matrix.mtx")
data_mat <- read10xMatrix(matrix.loc)
cell.info <- read.delim(barcode.loc, header = TRUE, colClasses = "character", stringsAsFactors = FALSE, quote = "", comment.char = "", sep=",") %>% DataFrame()
peak.info <- read.delim(gene.loc, header = TRUE, colClasses = "character", stringsAsFactors = FALSE, quote = "", comment.char = "", sep=",") %>% DataFrame()
peak.info_granges <- GRanges(peak.info[,c("peak","chr","start","end")])
rownames(data_mat) <- peak.info$peak
colnames(data_mat) <- cell.info$sample
SingleCellExperiment(list(counts = data_mat), rowData = peak.info_granges, colData = cell.info)
}
# Cells with fewer than 500 UMIs or more than 9,100 UMIs were discarded
preproc.rna <- function(sce) {
sce = calculateQCMetrics(sce)
# sce_filt <- sce_filt[!rowData(sce)$pct_dropout_counts > 90,]
# sf = computeSumFactors(sce_filt, positive=TRUE, sf.out=T)
# sizeFactors(sce) <- sf; sce$sizeFactor <- sf
sce <- normalize(sce, exprs_values="counts")
return(sce)
}
# Low signal cells (peak count < 300) were filtered out.
# Peak count matrix was binarized.
# Peaks within 1 kb were merged and reads in merged peaks were aggregated to generate a matrix with merged peaks.
preproc.atac <- function(sce) {
sce = calculateQCMetrics(sce)
sce <- sce[,sce$total_features >= 300]
sce = calculateQCMetrics(sce)
sce <- sce[rowData(sce)$n_cells_counts > 25,]
sce = calculateQCMetrics(sce)
# sf = computeSumFactors(sce_filt, positive=TRUE, sf.out=T)
# sizeFactors(sce) <- sf; sce$sizeFactor <- sf
# sce <- normalize(sce, exprs_values="counts")
logcounts(sce) <- as.numeric( as.factor(as.matrix(counts(sce))>0) )
return(sce)
}
##############
## RNA only ##
##############
# Load data
sce_rna <- read10xCounts.rna("/Users/ricard/data/Cao2018/HEK293T_NIH373_A549/rna_only")
###############
## ATAC only ##
###############
sce_atac <- read10xCounts.atac("/Users/ricard/data/Cao2018/HEK293T_NIH373_A549/atac_only")
#############
## sci-CAR ##
#############
# Load data
sce_car.rna <- read10xCounts.rna("/Users/ricard/data/Cao2018/HEK293T_NIH373_A549/sci-car/rna/raw")
sce_car.atac <- read10xCounts.atac("/Users/ricard/data/Cao2018/HEK293T_NIH373_A549/sci-car/atac/raw")
#########################################
## Combine with RNA-only and ATAC-only ##
#########################################
mean(rownames(sce_car.atac) == rownames(sce_atac))
mean(rownames(sce_car.rna) == rownames(sce_rna))
sce.atac.combined <- cbind(sce_car.atac,sce_atac)
sce.rna.combined <- cbind(sce_car.rna,sce_rna)
############
## Filter ##
############
sce.rna.combined_filt <- sce.rna.combined[,sce.rna.combined$cell_name=="A549"]
sce.rna.combined_filt <- sce.rna.combined_filt[rowData(sce.rna.combined_filt)$gene_type == "protein_coding",]
sce.rna.combined_filt$group <- paste(sce.rna.combined_filt$cell_name, paste0(sce.rna.combined_filt$treatment_time,"h"), sep="_")
colData(sce.rna.combined_filt) <- colData(sce.rna.combined_filt)[,c("sample","group")]
sce.atac.combined_filt <- sce.atac.combined[,sce.atac.combined$group%in%c("A549_3h","A549_1h","A549_0h")]
sce.atac.combined_filt <- sce.atac.combined_filt[seqnames(rowRanges(sce.atac.combined_filt)) %in% c(1:22,"X"),]
colData(sce.atac.combined_filt) <- colData(sce.atac.combined_filt)[,c("sample","group")]
sce <- sce.atac.combined_filt
counts(sce[1:100,1:100])>0
# sce <- normalize(sce, exprs_values="counts")
sce <- sce[1:100,1:100]
logcounts(sce) <- as.matrix((counts(sce)>0)+0)
logcounts(sce)
table(logcounts(sce))
(counts(sce)>0)
as.matrix((counts(sce)>0)
)
sce <- sce.atac.combined_filt
# sce <- normalize(sce, exprs_values="counts")
logcounts(sce) <- as.matrix((counts(sce)>0)+0)
plotPCA(sce, colour_by="group", ncomponents=5)
logcounts(sce)[1:100,1:100]
length(intersect(colnames(sce_car.rna_filt),colnames(sce_car.atac_filt)))
# Cells with fewer than 500 UMIs or more than 9,100 UMIs were discarded
preproc.rna <- function(sce) {
sce = calculateQCMetrics(sce)
# sce_filt <- sce_filt[!rowData(sce)$pct_dropout_counts > 90,]
# sf = computeSumFactors(sce_filt, positive=TRUE, sf.out=T)
# sizeFactors(sce) <- sf; sce$sizeFactor <- sf
sce <- normalize(sce, exprs_values="counts")
return(sce)
}
# Low signal cells (peak count < 300) were filtered out.
# Peak count matrix was binarized.
# Peaks within 1 kb were merged and reads in merged peaks were aggregated to generate a matrix with merged peaks.
preproc.atac <- function(sce) {
sce = calculateQCMetrics(sce)
sce <- sce[,sce$total_features >= 300]
sce = calculateQCMetrics(sce)
sce <- sce[rowData(sce)$n_cells_counts > 25,]
sce = calculateQCMetrics(sce)
# sf = computeSumFactors(sce_filt, positive=TRUE, sf.out=T)
# sizeFactors(sce) <- sf; sce$sizeFactor <- sf
# sce <- normalize(sce, exprs_values="counts")
logcounts(sce) <- as.matrix((counts(sce)>0)+0)
return(sce)
}
sce.rna.combined_filt <- preproc.rna(sce.rna.combined_filt)
sce.atac.combined_filt <- preproc.atac(sce.atac.combined_filt)
sce <- sce.rna.combined_filt
plotPCA(sce, colour_by="group", ncomponents=3)
min(sce$total_counts)
dim(sce)
sce <- sce[,sce$total_counts>=5 & sce$total_counts<=9100]
dim8sce
dim(sce)
sce.rna.combined_filt <- sce
saveRDS(sce.rna.combined_filt, "/Users/ricard/data/Cao2018/HEK293T_NIH373_A549/combined/rna/parsed/sce.rds")
saveRDS(sce.atac.combined_filt, "/Users/ricard/data/Cao2018/HEK293T_NIH373_A549/combined/atac/parsed/sce.rds")
